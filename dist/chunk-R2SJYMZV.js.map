{"version":3,"sources":["../src/util/createCommand.ts","../src/util/createEvent.ts","../src/util/normalizeError.ts","../src/util/randomNumber.ts","../src/util/sendError.ts","../src/util/index.ts"],"sourcesContent":["import type {\r\n\tApplicationCommandOptionType,\r\n\tApplicationCommandType,\r\n} from \"discord-api-types/v10\";\r\nimport type { CommandOptions } from \"./types\";\r\n\r\n/**\r\n * This utility function is just to infer automatically the command type from the data.\r\n * @param command - The command data\r\n * @returns The command data\r\n */\r\nexport const createCommand = <\r\n\tT extends ApplicationCommandType,\r\n\tO extends ApplicationCommandOptionType,\r\n\tN extends string = string\r\n>(\r\n\tcommand: CommandOptions<T, O, N>\r\n) => command;\r\n\r\nexport default createCommand;\r\n","import type { ClientEvents } from \"discord.js\";\nimport type { EventOptions } from \"./types\";\n\n/**\n * This utility function is just to infer automatically event types from the data.\n * @param event - The event data\n * @returns The event data\n */\nexport const createEvent = <K extends keyof ClientEvents>(\n\tevent: EventOptions<K>\n) => event;\n\nexport default createEvent;\n","import CustomClient from \"./CustomClient\";\r\n\r\n/**\r\n * Normalize a promise rejection to a plain error object.\r\n * @param err - The error to normalize\r\n * @returns An Error object\r\n */\r\nexport const normalizeError = (err: unknown) => {\r\n\tCustomClient.printToStderr(err);\r\n\treturn err instanceof Error\r\n\t\t? err\r\n\t\t: new Error(typeof err === \"string\" ? err : \"Unknown error\");\r\n};\r\n\r\nexport default normalizeError;\r\n","/**\r\n * Get a random number between a min and max.\r\n * @param min - The minimum number\r\n * @param max - The maximum number\r\n * @returns A random number between min and max\r\n */\r\nexport const randomNumber: {\r\n\t(min: number, max: number): number;\r\n\t(): number;\r\n} = (min?: number, max?: number) =>\r\n\tmin === undefined\r\n\t\t? Math.random()\r\n\t\t: Math.floor(Math.random() * (max! - min + 1)) + min;\r\n\r\nexport default randomNumber;\r\n","import type { ReceivedInteraction } from \".\";\n\nexport const sendError = (interaction: ReceivedInteraction, error: Error) =>\n\tinteraction[interaction.deferred ? \"editReply\" : \"reply\"]({\n\t\tcontent: `Couldn't unban user: \\`${error.message.slice(0, 1000)}\\``,\n\t\tephemeral: true,\n\t});\n\nexport default sendError;\n","import Constants from \"./Constants\";\r\n\r\nexport * from \"./calculateRam\";\r\nexport * from \"./cast\";\r\nexport * from \"./colors\";\r\nexport * from \"./Command\";\r\nexport * from \"./Constants\";\r\nexport * from \"./createCommand\";\r\nexport * from \"./createEvent\";\r\nexport * from \"./CustomClient\";\r\nexport * from \"./database\";\r\nexport * from \"./eval\";\r\nexport * from \"./Event\";\r\nexport * from \"./interactions\";\r\nexport * from \"./loadCommands\";\r\nexport * from \"./loadEvents\";\r\nexport * from \"./normalizeError\";\r\nexport * from \"./Queue\";\r\nexport * from \"./randomNumber\";\r\nexport * from \"./sendError\";\r\nexport * from \"./setPermanentTimeout\";\r\nexport * from \"./types\";\r\n\r\nexport default Constants;\r\n"],"mappings":"+CAWO,GAAM,GAAgB,AAK5B,GACI,ECTE,GAAM,GAAc,AAC1B,GACI,ECHE,GAAM,GAAiB,AAAC,GAC9B,GAAa,cAAc,CAAG,EACvB,YAAe,OACnB,EACA,GAAI,OAAM,MAAO,IAAQ,SAAW,EAAM,eAAe,GCLtD,GAAM,GAGT,CAAC,EAAc,IAClB,IAAQ,OACL,KAAK,OAAO,EACZ,KAAK,MAAM,KAAK,OAAO,EAAK,GAAO,EAAM,EAAE,EAAI,ECV5C,GAAM,GAAY,CAAC,EAAkC,IAC3D,EAAY,EAAY,SAAW,YAAc,SAAS,CACzD,QAAS,0BAA0B,EAAM,QAAQ,MAAM,EAAG,GAAI,MAC9D,UAAW,EACZ,CAAC,ECiBF,GAAO,GAAQ","names":[]}