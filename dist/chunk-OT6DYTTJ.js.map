{"version":3,"sources":["../src/util/actions/actions.ts","../src/util/actions/avatar.ts","../src/util/colors.ts","../src/util/CustomClient.ts","../src/util/actions/bann.ts","../src/util/database.ts","../src/util/Queue.ts","../src/util/setPermanentTimeout.ts","../src/util/actions/banner.ts","../src/util/actions/bannList.ts","../src/util/actions/calc.ts","../src/util/actions/cat.ts","../src/util/actions/createEmoji.ts","../src/util/actions/deleteEmoji.ts","../src/util/actions/dice.ts","../src/util/randomNumber.ts","../src/util/actions/dog.ts","../src/util/actions/editEmoji.ts","../src/util/actions/emojiInfo.ts","../src/util/actions/emojiList.ts","../src/util/actions/google.ts","../src/util/actions/icon.ts","../src/util/actions/kick.ts","../src/util/actions/love.ts","../src/util/actions/ping.ts","../src/util/actions/predict.ts","../src/util/actions/random.ts","../src/util/types.ts","../src/util/actions/rps.ts","../src/util/actions/timeout.ts","../src/util/actions/timestamp.ts","../src/util/actions/unbann.ts","../src/util/loadCommands.ts","../src/util/Command.ts","../src/util/loadEvents.ts","../src/util/Event.ts"],"sourcesContent":["import type { Actions } from \"../types\";\r\n\r\n/**\r\n * Create an action id.\r\n * @param action - The action to do\r\n * @param args - The arguments to pass to the action\r\n * @returns The id of the action\r\n */\r\nexport const createActionId = <T extends keyof Actions>(\r\n\taction: T,\r\n\t...args: Actions[T]\r\n) => `${action}${args.length ? `-${args.join(\"-\")}` : \"\"}`;\r\n\r\n/**\r\n * Parse an action id.\r\n * @param id - The id to parse\r\n * @returns The action and arguments of the action\r\n */\r\nexport const parseActionId: {\r\n\t<T extends keyof Actions>(id: string): T extends keyof Actions\r\n\t\t? {\r\n\t\t\t\taction: T;\r\n\t\t\t\targs: Actions[T];\r\n\t\t  }\r\n\t\t: never;\r\n\t<_ extends keyof Actions>(button: string): {\r\n\t\taction: string;\r\n\t\targs: string[];\r\n\t};\r\n} = (id) => {\r\n\tconst args = id.split(\"-\");\r\n\r\n\treturn {\r\n\t\taction: args[0],\r\n\t\targs: args.slice(1),\r\n\t};\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { escapeBold } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Get the avatar of a user.\r\n * @param client - The client\r\n * @param userId - The id of the user\r\n * @param guildId - The id of the guild\r\n */\r\nexport const avatar: ActionMethod<\"avatar\", WebhookEditMessageOptions> = async (\r\n\tclient,\r\n\tuserId,\r\n\tguildId\r\n) => {\r\n\tconst userOrMember = await (guildId === undefined\r\n\t\t? client.users.fetch(userId)\r\n\t\t: client.guilds.cache\r\n\t\t\t\t.get(guildId)!\r\n\t\t\t\t.members.fetch(userId)\r\n\t\t\t\t.catch(() => client.users.fetch(userId)));\r\n\tconst avatarURL = userOrMember.displayAvatarURL({\r\n\t\textension: \"png\",\r\n\t\tforceStatic: false,\r\n\t\tsize: 4096,\r\n\t});\r\n\r\n\treturn {\r\n\t\tcontent: `Avatar di **[${escapeBold(\r\n\t\t\t\"nickname\" in userOrMember\r\n\t\t\t\t? userOrMember.nickname ?? userOrMember.user.username\r\n\t\t\t\t: userOrMember.username\r\n\t\t)}](${avatarURL} )**:`,\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\turl: avatarURL,\r\n\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","/**\r\n * Color ANSI codes\r\n */\r\nexport enum Color {\r\n\tBlack = 30,\r\n\tRed = 31,\r\n\tGreen = 32,\r\n\tBrown = 33,\r\n\tBlue = 34,\r\n\tMagenta = 35,\r\n\tCyan = 36,\r\n\tGray = 37,\r\n}\r\n\r\n/**\r\n * Colors a text in the console.\r\n * @param text - The text to color\r\n * @param code - The color to use\r\n * @returns The colored text\r\n */\r\nexport const color = (text: string, code: Color): string =>\r\n\t`\\x1b[${code}m${text}\\x1b[m`;\r\n\r\nexport default color;\r\n","import type { REST } from \"@discordjs/rest\";\r\nimport { ActivityType } from \"discord-api-types/v10\";\r\nimport { Client, Options, Partials } from \"discord.js\";\r\nimport { createWriteStream } from \"node:fs\";\r\nimport { readdir } from \"node:fs/promises\";\r\nimport { stderr, stdout } from \"node:process\";\r\nimport { inspect } from \"node:util\";\r\nimport { calc } from \"./actions\";\r\nimport color, { Color } from \"./colors\";\r\nimport type Command from \"./Command\";\r\nimport Constants from \"./Constants\";\r\nimport { importVariable, writeVariable } from \"./database\";\r\nimport type Event from \"./Event\";\r\nimport loadCommands from \"./loadCommands\";\r\nimport loadEvents from \"./loadEvents\";\r\nimport type { DatabaseVariables, RestEvents } from \"./types\";\r\nimport { EventType } from \"./types\";\r\n\r\n/**\r\n * A custom class to interact with Discord\r\n */\r\nexport class CustomClient<T extends boolean = boolean> extends Client<T> {\r\n\t/**\r\n\t * If the client is blocked and should not perform any action\r\n\t */\r\n\tblocked = false;\r\n\r\n\t/**\r\n\t * Commands of this client\r\n\t */\r\n\tcommands = new Map<string, Command>();\r\n\r\n\t/**\r\n\t * Events of this client\r\n\t */\r\n\tevents = new Map<string, Event>();\r\n\r\n\t/**\r\n\t * The rest of this client\r\n\t */\r\n\tdeclare rest: REST & {\r\n\t\ton: <K extends keyof RestEvents>(\r\n\t\t\tevent: K,\r\n\t\t\tlistener: (...args: RestEvents[K]) => void\r\n\t\t) => REST;\r\n\t\tonce: <K extends keyof RestEvents>(\r\n\t\t\tevent: K,\r\n\t\t\tlistener: (...args: RestEvents[K]) => void\r\n\t\t) => REST;\r\n\t\toff: <K extends keyof RestEvents>(\r\n\t\t\tevent: K,\r\n\t\t\tlistener: (...args: RestEvents[K]) => void\r\n\t\t) => REST;\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tintents: [\r\n\t\t\t\t\"Guilds\",\r\n\t\t\t\t\"GuildMessages\",\r\n\t\t\t\t\"GuildBans\",\r\n\t\t\t\t\"GuildEmojisAndStickers\",\r\n\t\t\t\t\"GuildPresences\",\r\n\t\t\t\t\"GuildMembers\",\r\n\t\t\t],\r\n\t\t\tallowedMentions: { parse: [], repliedUser: false, roles: [], users: [] },\r\n\t\t\tfailIfNotExists: false,\r\n\t\t\trest: {\r\n\t\t\t\tinvalidRequestWarningInterval: 9_998,\r\n\t\t\t},\r\n\t\t\tmakeCache: Options.cacheWithLimits({\r\n\t\t\t\t...Options.DefaultMakeCacheSettings,\r\n\t\t\t\tBaseGuildEmojiManager: 0,\r\n\t\t\t\tGuildBanManager: 100,\r\n\t\t\t\tGuildInviteManager: 0,\r\n\t\t\t\tGuildMemberManager: 1_000,\r\n\t\t\t\tGuildStickerManager: 0,\r\n\t\t\t\tMessageManager: 0,\r\n\t\t\t\tPresenceManager: 10_000,\r\n\t\t\t\tReactionManager: 0,\r\n\t\t\t\tReactionUserManager: 0,\r\n\t\t\t\tStageInstanceManager: 0,\r\n\t\t\t\tThreadMemberManager: 0,\r\n\t\t\t\tUserManager: 1_000_000,\r\n\t\t\t\tVoiceStateManager: 0,\r\n\t\t\t}),\r\n\t\t\tpresence: {\r\n\t\t\t\tactivities: [{ name: \"MS Gaming\", type: ActivityType.Watching }],\r\n\t\t\t},\r\n\t\t\tshards: \"auto\",\r\n\t\t\tpartials: [\r\n\t\t\t\tPartials.Channel,\r\n\t\t\t\tPartials.GuildMember,\r\n\t\t\t\tPartials.Message,\r\n\t\t\t\tPartials.Reaction,\r\n\t\t\t\tPartials.User,\r\n\t\t\t\tPartials.GuildScheduledEvent,\r\n\t\t\t\tPartials.ThreadMember,\r\n\t\t\t],\r\n\t\t\twaitGuildTimeout: 1_000,\r\n\t\t});\r\n\r\n\t\tthis.rest.raw = (options) => {\r\n\t\t\tthis.rest.emit(\"request\", options);\r\n\t\t\treturn this.rest.requestManager.queueRequest(options);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Inspects a value.\r\n\t * @param value - The value to check\r\n\t */\r\n\tstatic inspect(this: void, value: unknown) {\r\n\t\tswitch (typeof value) {\r\n\t\t\tcase \"string\":\r\n\t\t\t\treturn value;\r\n\t\t\tcase \"bigint\":\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"boolean\":\r\n\t\t\tcase \"function\":\r\n\t\t\tcase \"symbol\":\r\n\t\t\t\treturn value.toString();\r\n\t\t\tcase \"object\":\r\n\t\t\t\treturn inspect(value);\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"undefined\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Logs a message in the log file.\r\n\t * @param message - The message to log\r\n\t * @returns A promise that resolves when the message is logged\r\n\t */\r\n\tstatic logToFile(message: string) {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\ttry {\r\n\t\t\t\tcreateWriteStream(`./debug.log`, { flags: \"a\" })\r\n\t\t\t\t\t.once(\"error\", CustomClient.printToStderr)\r\n\t\t\t\t\t.once(\"finish\", resolve)\r\n\t\t\t\t\t.setDefaultEncoding(\"utf8\")\r\n\t\t\t\t\t.end(message);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tCustomClient.printToStderr(error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Prints a message to stdout.\r\n\t * @param message - The string to print\r\n\t * @param log - If the message should be logged in the log file too\r\n\t */\r\n\tstatic printToStdout(this: void, message: unknown, log = false) {\r\n\t\tconst formatted = CustomClient.format(message);\r\n\r\n\t\tstdout.write(formatted);\r\n\t\tif (log) void CustomClient.logToFile(formatted);\r\n\t}\r\n\r\n\t/**\r\n\t * Prints a message to stderr.\r\n\t * @param message - The string to print\r\n\t * @param log - If the message should be logged in the log file too\r\n\t */\r\n\tstatic printToStderr(this: void, message: unknown, log = false) {\r\n\t\tconst formatted = CustomClient.format(message);\r\n\r\n\t\tstderr.write(color(formatted, Color.Red));\r\n\t\tif (log) void CustomClient.logToFile(formatted);\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a string with the current time.\r\n\t * @param message - The message to format\r\n\t * @returns The formatted message\r\n\t */\r\n\tprivate static format(this: void, message: unknown): string {\r\n\t\treturn `${CustomClient.inspect(message)} (${new Date().toLocaleString(\r\n\t\t\tundefined,\r\n\t\t\t{\r\n\t\t\t\ttimeZone: \"Europe/Rome\",\r\n\t\t\t}\r\n\t\t)})\\n`;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads commands and events, then logs in with Discord.\r\n\t * @returns A promise that resolves when the client is ready\r\n\t */\r\n\tasync login() {\r\n\t\tawait Promise.all([\r\n\t\t\tloadCommands(this),\r\n\t\t\t...Object.values(EventType).map((type) => loadEvents(this, type)),\r\n\t\t\treaddir(`./${Constants.databaseFolderName}`).then((files) =>\r\n\t\t\t\tPromise.all(\r\n\t\t\t\t\tfiles.map((name) =>\r\n\t\t\t\t\t\timportVariable(name.split(\".\")[0] as keyof DatabaseVariables)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t),\r\n\t\t\timportVariable(\"timeouts\").then((timeouts) => {\r\n\t\t\t\ttimeouts = timeouts.filter((timeout) => timeout.date > Date.now());\r\n\t\t\t\tfor (const { args, date, name } of timeouts)\r\n\t\t\t\t\tsetTimeout(async () => {\r\n\t\t\t\t\t\tawait Promise.all([\r\n\t\t\t\t\t\t\timport(`./util/timeouts/${name}.js`).then(\r\n\t\t\t\t\t\t\t\t(module: { default: (...funcArgs: typeof args) => unknown }) =>\r\n\t\t\t\t\t\t\t\t\tmodule.default(...args)\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\timportVariable(\"timeouts\").then((newTimeouts) =>\r\n\t\t\t\t\t\t\t\twriteVariable(\r\n\t\t\t\t\t\t\t\t\t\"timeouts\",\r\n\t\t\t\t\t\t\t\t\tnewTimeouts.filter((t) => t.date !== date)\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}, date - Date.now()).unref();\r\n\t\t\t\treturn writeVariable(\"timeouts\", timeouts);\r\n\t\t\t}),\r\n\t\t\tcalc(this as CustomClient<true>, \"\"),\r\n\t\t]);\r\n\r\n\t\treturn super.login();\r\n\t}\r\n}\r\n\r\nexport default CustomClient;\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { escapeMarkdown } from \"discord.js\";\r\nimport ms from \"ms\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport { setPermanentTimeout } from \"../setPermanentTimeout\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Bann a user from a guild.\r\n * @param client - The client\r\n * @param userId - The id of the user to bann\r\n * @param guildId - The guild to bann the user from\r\n * @param executorId - The user who executed the action, if any\r\n * @param reason - The reason for the action\r\n * @param deleteMessageDays - The number of days to delete\r\n * @param duration - The duration of the ban\r\n */\r\nexport const bann: ActionMethod<\"bann\", WebhookEditMessageOptions> = async (\r\n\tclient,\r\n\tuserId,\r\n\tguildId,\r\n\texecutorId,\r\n\treason,\r\n\tdeleteMessageDays,\r\n\tduration\r\n) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.BanMembers) !== true\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Bannare i membri**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst member = await guild.members.fetch(userId).catch(() => null);\r\n\tif (userId === guild.ownerId)\r\n\t\treturn {\r\n\t\t\tcontent: \"Non puoi bannare il proprietario del server!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst rawPosition = member?.roles.highest.rawPosition;\r\n\r\n\tif (\r\n\t\tmember &&\r\n\t\texecutor &&\r\n\t\tisNotOwner &&\r\n\t\texecutor.roles.highest.rawPosition <= rawPosition!\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non puoi bannare un membro con un ruolo superiore o uguale al tuo!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst durationMs = duration !== undefined ? ms(duration) : undefined;\r\n\tconst noDuration = durationMs === undefined;\r\n\r\n\tif (!noDuration && durationMs < 60_000)\r\n\t\treturn {\r\n\t\t\tcontent: \"La durata deve essere maggiore di 1 minuto!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.BanMembers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per bannare membri!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.BanMembers | me!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\tif (member && me!.roles.highest.rawPosition <= rawPosition!)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non posso bannare un membro con un ruolo maggiore o uguale al mio!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst timestamp = noDuration\r\n\t\t? undefined\r\n\t\t: Math.round((Date.now() + durationMs) / 1000);\r\n\r\n\treturn Promise.all([\r\n\t\tmember?.user ?? client.users.fetch(userId),\r\n\t\tguild.members.ban(userId, {\r\n\t\t\treason: `${\r\n\t\t\t\texecutor ? `Bannato da ${executor.user.tag} (${executorId!})` : \"\"\r\n\t\t\t}${reason == null ? \"\" : `${executor ? \": \" : \"\"}${reason}`}`,\r\n\t\t\tdeleteMessageDays: Number(deleteMessageDays) || undefined,\r\n\t\t}),\r\n\t\tnoDuration\r\n\t\t\t? undefined\r\n\t\t\t: setPermanentTimeout(\"unbann\", durationMs, guildId, userId),\r\n\t])\r\n\t\t.then(\r\n\t\t\t([banned]): WebhookEditMessageOptions => ({\r\n\t\t\t\tcontent: `<@${userId}> (${escapeMarkdown(\r\n\t\t\t\t\tbanned.tag\r\n\t\t\t\t)} - ${userId}) è stato bannato dal server${\r\n\t\t\t\t\tnoDuration ? \"\" : ` fino a <t:${timestamp!}:F> (<t:${timestamp!}:R>)`\r\n\t\t\t\t}!${\r\n\t\t\t\t\treason == null\r\n\t\t\t\t\t\t? \"\"\r\n\t\t\t\t\t\t: `\\n\\nMotivo: ${\r\n\t\t\t\t\t\t\t\treason.length > 1000 ? `${reason.slice(0, 1000)}...` : reason\r\n\t\t\t\t\t\t  }`\r\n\t\t\t\t}`,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\tlabel: \"Revoca bann\",\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\t\t\"unbann\",\r\n\t\t\t\t\t\t\t\t\tuserId,\r\n\t\t\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t\t\texecutorId\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((error: Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import { createReadStream, createWriteStream } from \"node:fs\";\r\nimport Constants from \"./Constants\";\r\nimport Queue from \"./Queue\";\r\nimport type { DatabaseVariables } from \"./types\";\r\n\r\nconst queues: Partial<Record<keyof DatabaseVariables, Queue>> = {};\r\nexport const database: Partial<DatabaseVariables> = {};\r\n\r\n/**\r\n * Import a variable from the database.\r\n * @param name - The name of the variable to get\r\n * @param force - Whether to skip the cache and force a re-read\r\n * @returns The value of the variable\r\n */\r\nexport const importVariable = async <T extends keyof DatabaseVariables>(\r\n\tname: T,\r\n\tforce = false\r\n): Promise<DatabaseVariables[T]> => {\r\n\tawait (queues[name] ??= new Queue()).wait();\r\n\tqueues[name]!.next();\r\n\tif (database[name] !== undefined && !force) return database[name]!;\r\n\tlet data = \"\";\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tcreateReadStream(`./${Constants.databaseFolderName}/${name}.json`)\r\n\t\t\t.on(\"data\", (chunk) => (data += chunk))\r\n\t\t\t.once(\"end\", () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresolve((database[name] = JSON.parse(data)));\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.once(\"error\", reject)\r\n\t\t\t.setEncoding(\"utf8\");\r\n\t});\r\n};\r\n\r\n/**\r\n * Write a variable to the database.\r\n * @param name - The name of the variable to write\r\n * @param value - The value of the variable\r\n */\r\nexport const writeVariable = async <T extends keyof DatabaseVariables>(\r\n\tname: T,\r\n\tvalue: DatabaseVariables[T]\r\n): Promise<void> => {\r\n\tawait (queues[name] ??= new Queue()).wait();\r\n\tif (database[name] === value) return undefined;\r\n\tdatabase[name] = value;\r\n\tconst promise = new Promise<void>((resolve, reject) => {\r\n\t\tcreateWriteStream(`./${Constants.databaseFolderName}/${name}.json`)\r\n\t\t\t.once(\"error\", reject)\r\n\t\t\t.setDefaultEncoding(\"utf8\")\r\n\t\t\t.end(JSON.stringify(value), resolve);\r\n\t});\r\n\r\n\tpromise.finally(queues[name]!.next.bind(queues[name]));\r\n\treturn promise;\r\n};\r\n","import type { QueuePromise } from \"./types\";\r\n\r\n/**\r\n * A queue to wait for an action to be completed before continuing\r\n */\r\nexport class Queue {\r\n\t/**\r\n\t * The promises in the queue\r\n\t */\r\n\tpromises: QueuePromise[] = [];\r\n\r\n\t/**\r\n\t * Waits for last promise to resolve and queues a new one.\r\n\t */\r\n\twait() {\r\n\t\tlet resolve!: () => void;\r\n\t\tconst next = this.promises.at(-1)?.promise ?? Promise.resolve();\r\n\t\tconst promise = new Promise<void>((res) => {\r\n\t\t\tresolve = res;\r\n\t\t});\r\n\r\n\t\tthis.promises.push({ resolve, promise });\r\n\t\treturn next;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the last promise from the queue.\r\n\t */\r\n\tnext() {\r\n\t\tthis.promises.shift()?.resolve();\r\n\t}\r\n}\r\n\r\nexport default Queue;\r\n","import { importVariable, writeVariable } from \"./database\";\r\n\r\n/**\r\n * Set a timeout that will be restored after the bot restarts.\r\n * @param name - The file name with the callback to be called after the timeout\r\n * @param time - The time to wait before calling the callback\r\n * @param args - The arguments to pass to the callback\r\n */\r\nexport const setPermanentTimeout = async (\r\n\tname: string,\r\n\ttime: number,\r\n\t...args: string[]\r\n): Promise<NodeJS.Timeout> => {\r\n\tconst timeouts = await importVariable(\"timeouts\");\r\n\tconst date = Date.now() + time;\r\n\tconst timeout = setTimeout(async () => {\r\n\t\tawait Promise.all([\r\n\t\t\timport(`./util/timeouts/${name}.js`).then(\r\n\t\t\t\t(module: { default: (...funcArgs: typeof args) => unknown }) =>\r\n\t\t\t\t\tmodule.default(...args)\r\n\t\t\t),\r\n\t\t\timportVariable(\"timeouts\").then((newTimeouts) =>\r\n\t\t\t\twriteVariable(\r\n\t\t\t\t\t\"timeouts\",\r\n\t\t\t\t\tnewTimeouts.filter((t) => t.date !== date)\r\n\t\t\t\t)\r\n\t\t\t),\r\n\t\t]);\r\n\t}, time).unref();\r\n\r\n\tawait writeVariable(\"timeouts\", [\r\n\t\t...timeouts,\r\n\t\t{\r\n\t\t\tdate,\r\n\t\t\tname,\r\n\t\t\targs,\r\n\t\t},\r\n\t]);\r\n\treturn timeout;\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { escapeBold } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Get the banner of a user.\r\n * @param client - The client\r\n * @param userId - The id of the user\r\n */\r\nexport const banner: ActionMethod<\r\n\t\"banner\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, userId) => {\r\n\tconst user = await client.users.fetch(userId, { force: true });\r\n\tconst bannerURL = user.bannerURL({\r\n\t\textension: \"png\",\r\n\t\tforceStatic: false,\r\n\t\tsize: 4096,\r\n\t});\r\n\r\n\treturn bannerURL == null\r\n\t\t? {\r\n\t\t\t\tcontent: \"Questo utente non ha un banner!\",\r\n\t\t\t\tephemeral: true,\r\n\t\t  }\r\n\t\t: {\r\n\t\t\t\tcontent: `Banner di **[${escapeBold(user.username)}](${bannerURL} )**:`,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\turl: bannerURL,\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t  };\r\n};\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { Colors } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Get a list of bann in a server.\r\n * @param client - The client\r\n * @param guildId - The id of the server\r\n * @param page - The page number\r\n */\r\nexport const bannList: ActionMethod<\r\n\t\"bannList\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, guildId, page = \"0\", executorId) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.BanMembers) !== true\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Bannare i membri**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst pageNumber = Number(page);\r\n\tconst end = pageNumber * 25 + 25;\r\n\tconst collection = (\r\n\t\tguild.bans.cache.size ? guild.bans.cache : await guild.bans.fetch()\r\n\t)\r\n\t\t.clone()\r\n\t\t.reverse();\r\n\tconst { size } = collection;\r\n\tconst bans = [...collection.values()].slice(pageNumber * 25, end);\r\n\r\n\treturn {\r\n\t\tembeds: [\r\n\t\t\t{\r\n\t\t\t\ttitle: \"Membri bannati\",\r\n\t\t\t\tfields: bans.map((bann) => ({\r\n\t\t\t\t\tname: `${bann.user.tag} (${bann.user.id})`,\r\n\t\t\t\t\tvalue:\r\n\t\t\t\t\t\tbann.reason != null\r\n\t\t\t\t\t\t\t? bann.reason.length > 1024\r\n\t\t\t\t\t\t\t\t? `${bann.reason.slice(0, 1021)}...`\r\n\t\t\t\t\t\t\t\t: bann.reason\r\n\t\t\t\t\t\t\t: \"Nessuna motivazione\",\r\n\t\t\t\t})),\r\n\t\t\t\tfooter: {\r\n\t\t\t\t\ttext: `Pagina ${pageNumber + 1}/${Math.ceil(size / 25)}`,\r\n\t\t\t\t},\r\n\t\t\t\tdescription: bans.length === 0 ? \"Nessun bann trovato!\" : undefined,\r\n\t\t\t\tauthor: {\r\n\t\t\t\t\tname: guild.name,\r\n\t\t\t\t\ticon_url:\r\n\t\t\t\t\t\tguild.iconURL({\r\n\t\t\t\t\t\t\textension: \"png\",\r\n\t\t\t\t\t\t\tforceStatic: false,\r\n\t\t\t\t\t\t\tsize: 4096,\r\n\t\t\t\t\t\t}) ?? undefined,\r\n\t\t\t\t},\r\n\t\t\t\tcolor: Colors.Blurple,\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t},\r\n\t\t],\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\"bannList\",\r\n\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t`${pageNumber - 1}`,\r\n\t\t\t\t\t\t\texecutorId,\r\n\t\t\t\t\t\t\t\"true\"\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\tdisabled: page === \"0\",\r\n\t\t\t\t\t\temoji: {\r\n\t\t\t\t\t\t\tname: \"⬅\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: \"Precedente\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\"bannList\",\r\n\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t`${pageNumber + 1}`,\r\n\t\t\t\t\t\t\texecutorId,\r\n\t\t\t\t\t\t\t\"true\"\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\tdisabled: end >= size,\r\n\t\t\t\t\t\temoji: {\r\n\t\t\t\t\t\t\tname: \"➡\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: \"Successivo\",\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","import type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { Colors } from \"discord.js\";\r\nimport { join } from \"node:path\";\r\nimport { cwd } from \"node:process\";\r\nimport type { WorkerPool } from \"workerpool\";\r\nimport { pool as workerpool } from \"workerpool\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\nlet pool: WorkerPool,\r\n\tready = false;\r\n\r\n/**\r\n * Calculate a mathematical expression.\r\n * @param _client - The client\r\n * @param expr - The expression to calculate\r\n * @param fraction - Whether to return a fraction\r\n */\r\nexport const calc: ActionMethod<\r\n\t\"calc\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, expr, fraction) => {\r\n\tif (!ready) {\r\n\t\tvoid (pool ??= workerpool(join(cwd(), \"dist/util/workers/math.js\"), {\r\n\t\t\tmaxWorkers: 1,\r\n\t\t}))\r\n\t\t\t.exec(\"evaluate\", [\"0\"])\r\n\t\t\t.then(() => (ready = true))\r\n\t\t\t.catch(CustomClient.printToStderr);\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"La calcolatrice è in fase di inizializzazione, riprova tra qualche secondo...\",\r\n\t\t};\r\n\t}\r\n\r\n\tconst result = await pool\r\n\t\t.exec(\"evaluate\", [expr, fraction === \"true\"])\r\n\t\t.timeout(2_000)\r\n\t\t.catch((err: unknown) => err);\r\n\tconst error = typeof result !== \"string\";\r\n\r\n\treturn {\r\n\t\tembeds: [\r\n\t\t\t{\r\n\t\t\t\ttitle: \"Calcolatrice\",\r\n\t\t\t\tfields: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"📝 Operazione\",\r\n\t\t\t\t\t\tvalue: `\\`${expr}\\``,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: `📝 ${error ? \"Errore\" : \"Risultato\"}`,\r\n\t\t\t\t\t\tvalue: error\r\n\t\t\t\t\t\t\t? result instanceof Error\r\n\t\t\t\t\t\t\t\t? result.message\r\n\t\t\t\t\t\t\t\t: \"Errore\"\r\n\t\t\t\t\t\t\t: result.slice(0, 1024),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\tcolor: error ? Colors.Red : Colors.Blurple,\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t},\r\n\t\t],\r\n\t\tephemeral: error,\r\n\t};\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { env } from \"node:process\";\r\nimport { request } from \"undici\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod, CatResponse } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Get a cat image.\r\n */\r\nexport const cat: ActionMethod<\"cat\", WebhookEditMessageOptions> = () =>\r\n\trequest(\r\n\t\t\"https://api.thecatapi.com/v1/images/search?order=RANDOM&limit=1&format=json\",\r\n\t\t{\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"x-api-key\": env.CAT_API_KEY!,\r\n\t\t\t},\r\n\t\t}\r\n\t)\r\n\t\t.then<CatResponse>((res) => res.body.json())\r\n\t\t.then<Awaited<ReturnType<typeof cat>>>(([{ url }]) => ({\r\n\t\t\tcontent: `[Meow!](${url}) 🐱`,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Success,\r\n\t\t\t\t\t\t\tlabel: \"Un altro!\",\r\n\t\t\t\t\t\t\tcustom_id: createActionId(\"cat\"),\r\n\t\t\t\t\t\t\temoji: { name: \"🐱\" },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}))\r\n\t\t.catch((error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: \"Errore nella richiesta.\",\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\tlabel: \"Riprova\",\r\n\t\t\t\t\t\t\t\tcustom_id: createActionId(\"cat\"),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t};\r\n\t\t});\r\n","import { TimestampStyles } from \"@discordjs/builders\";\r\nimport {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tGuildPremiumTier,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type {\r\n\tDiscordAPIError,\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tMessageOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { escapeBold, GuildEmoji } from \"discord.js\";\r\nimport { Buffer } from \"node:buffer\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\nconst emojiLimit: Record<GuildPremiumTier, number> = {\r\n\t[GuildPremiumTier.None]: 50,\r\n\t[GuildPremiumTier.Tier1]: 100,\r\n\t[GuildPremiumTier.Tier2]: 150,\r\n\t[GuildPremiumTier.Tier3]: 250,\r\n};\r\n\r\n/**\r\n * Create an emoji.\r\n * @param client - The client\r\n * @param guildId - The id of the guild\r\n * @param attachment - The attachment of the emoji\r\n * @param name - The name of the emoji\r\n * @param executorId - The id of the executor\r\n * @param reason - The reason of creating the emoji\r\n * @param roles - The roles that can use the emoji\r\n */\r\nexport const createEmoji: ActionMethod<\r\n\t\"createEmoji\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, guildId, attachment, name, executorId, reason, ...roles) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers) !==\r\n\t\t\ttrue\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Gestire emoji e adesivi**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (name.length < 2 || name.length > 32)\r\n\t\treturn {\r\n\t\t\tcontent: \"Il nome dell'emoji deve essere compreso tra 2 e 32 caratteri!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (!/^[a-zA-Z0-9-_]+$/.test(name))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Il nome dell'emoji deve essere composto solo da caratteri alfanumerici e trattini bassi!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (attachment instanceof Buffer && attachment.byteLength >= 256 * 1024)\r\n\t\treturn {\r\n\t\t\tcontent: \"L'immagine deve essere inferiore di 256KB!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (guild.emojis.cache.size >= emojiLimit[guild.premiumTier])\r\n\t\treturn {\r\n\t\t\tcontent: `Limite emoji raggiunto (${emojiLimit[guild.premiumTier]})!`,\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per aggiungere emoji!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.ManageEmojisAndStickers |\r\n\t\t\t\t\t\t\t\tme!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\tconst emoji = await guild.emojis\r\n\t\t.create({\r\n\t\t\tattachment,\r\n\t\t\tname,\r\n\t\t\treason: `${\r\n\t\t\t\texecutor ? `Aggiunta da ${executor.user.tag} (${executorId!})` : \"\"\r\n\t\t\t}${reason == null ? \"\" : `${executor ? \": \" : \"\"}${reason}`}`,\r\n\t\t\troles,\r\n\t\t})\r\n\t\t.catch((error: DiscordAPIError | Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\tif (!(emoji instanceof GuildEmoji)) return emoji;\r\n\tconst createdTimestamp = Math.round(emoji.createdTimestamp / 1000);\r\n\tconst components: MessageOptions[\"components\"] = [\r\n\t\t{\r\n\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\tcustom_id: createActionId(\"emojiList\", guildId),\r\n\t\t\t\t\tlabel: \"Lista emoji\",\r\n\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\temoji: {\r\n\t\t\t\t\t\tanimated: emoji.animated ?? false,\r\n\t\t\t\t\t\tname: emoji.name ?? undefined,\r\n\t\t\t\t\t\tid: emoji.id,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t];\r\n\tconst allowedRoles = emoji.roles;\r\n\r\n\treturn {\r\n\t\tcontent: `${emoji.toString()} Emoji [${emoji.name!}](${\r\n\t\t\temoji.url\r\n\t\t}) aggiunta con successo! (${emoji.id})\\n\\nAnimata: **${\r\n\t\t\temoji.animated ?? false ? \"Sì\" : \"No\"\r\n\t\t}**\\nCreata <t:${createdTimestamp}:${\r\n\t\t\tTimestampStyles.LongDateTime\r\n\t\t}> (<t:${createdTimestamp}:${TimestampStyles.RelativeTime}>)${\r\n\t\t\tallowedRoles.cache.size > 0\r\n\t\t\t\t? `\\nRuoli consentiti: ${allowedRoles.cache\r\n\t\t\t\t\t\t.map((r) => `<@&${r.id}> (**${escapeBold(r.name)}**)`)\r\n\t\t\t\t\t\t.join(\", \")}`\r\n\t\t\t\t: \"\"\r\n\t\t}`,\r\n\t\tcomponents,\r\n\t};\r\n};\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type {\r\n\tDiscordAPIError,\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Delete an emoji.\r\n * @param client - The client\r\n * @param emojiIdentifier - The id of the emoji or its name\r\n * @param guildId - The id of the guild\r\n * @param executorId - The id of the user who executes the action\r\n * @param reason - The reason for deleting the emoji\r\n */\r\nexport const deleteEmoji: ActionMethod<\r\n\t\"deleteEmoji\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, emojiIdentifier, guildId, executorId, reason) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers) !==\r\n\t\t\ttrue\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Gestire emoji e adesivi**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst emoji = guild.emojis.cache.find(\r\n\t\t(e) =>\r\n\t\t\te.id === emojiIdentifier ||\r\n\t\t\te.name === emojiIdentifier ||\r\n\t\t\te.toString() === emojiIdentifier\r\n\t);\r\n\r\n\tif (!emoji)\r\n\t\treturn {\r\n\t\t\tcontent: \"Emoji non trovata! Specifica il nome completo o l'id.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (emoji.managed ?? false)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Questa emoji è gestita da un'integrazione e non può essere eliminata. Rimuovi l'integrazione per cancellarla.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per rimuovere emoji!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.ManageEmojisAndStickers |\r\n\t\t\t\t\t\t\t\tme!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\treturn emoji\r\n\t\t.delete(reason)\r\n\t\t.then(() => ({\r\n\t\t\tcontent: `Emoji \\`:${emoji.name ?? \"emoji\"}:\\` rimossa con successo!`,\r\n\t\t}))\r\n\t\t.catch((error: DiscordAPIError | Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport randomNumber from \"../randomNumber\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Roll the dice!\r\n * @param _client - The client\r\n * @param count - The number of dice to roll\r\n */\r\nexport const dice: ActionMethod<\r\n\t\"dice\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, count = \"1\") => {\r\n\tconst diceCount = Number(count);\r\n\r\n\tif (diceCount > 100)\r\n\t\treturn {\r\n\t\t\tcontent: `Non puoi lanciare più di 100 dadi!`,\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst results: number[] = [];\r\n\tlet result = 0;\r\n\r\n\tfor (let i = 0; i < diceCount; i++) {\r\n\t\tconst roll = randomNumber(1, 6);\r\n\r\n\t\tresult += roll;\r\n\t\tresults.push(roll);\r\n\t}\r\n\treturn {\r\n\t\tcontent: `🎲 **${result}** (${results.join(\", \")}) con ${diceCount} dadi!`,\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tcustom_id: createActionId(\"dice\", count),\r\n\t\t\t\t\t\tlabel: \"Tira di nuovo!\",\r\n\t\t\t\t\t\tstyle: ButtonStyle.Success,\r\n\t\t\t\t\t\temoji: {\r\n\t\t\t\t\t\t\tname: \"🎲\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","/**\r\n * Get a random number between a min and max.\r\n * @param min - The minimum number\r\n * @param max - The maximum number\r\n * @returns A random number between min and max\r\n */\r\nexport const randomNumber: {\r\n\t(min: number, max: number): number;\r\n\t(): number;\r\n} = (min?: number, max?: number) =>\r\n\tmin === undefined\r\n\t\t? Math.random()\r\n\t\t: Math.floor(Math.random() * (max! - min + 1)) + min;\r\n\r\nexport default randomNumber;\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { env } from \"node:process\";\r\nimport { request } from \"undici\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod, DogResponse } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Get a dog image.\r\n */\r\nexport const dog: ActionMethod<\"cat\", WebhookEditMessageOptions> = () =>\r\n\trequest(\r\n\t\t\"https://api.thedogapi.com/v1/images/search?order=RANDOM&limit=1&format=json\",\r\n\t\t{\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"x-api-key\": env.DOG_API_KEY!,\r\n\t\t\t},\r\n\t\t}\r\n\t)\r\n\t\t.then<DogResponse>((res) => res.body.json())\r\n\t\t.then<Awaited<ReturnType<typeof dog>>>(([{ url }]) => ({\r\n\t\t\tcontent: `[Woof!](${url}) 🐶`,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Success,\r\n\t\t\t\t\t\t\tlabel: \"Un altro!\",\r\n\t\t\t\t\t\t\tcustom_id: createActionId(\"dog\"),\r\n\t\t\t\t\t\t\temoji: { name: \"🐶\" },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}))\r\n\t\t.catch((error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: \"Errore nella richiesta.\",\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\tlabel: \"Riprova\",\r\n\t\t\t\t\t\t\t\tcustom_id: createActionId(\"dog\"),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t};\r\n\t\t});\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type {\r\n\tDiscordAPIError,\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Edit an emoji.\r\n * @param client - The client\r\n * @param emojiIdentifier - The id of the emoji or its name\r\n * @param guildId - The id of the guild\r\n * @param name - The new name of the emoji\r\n * @param executorId - The id of the user who executes the action\r\n * @param reason - The reason for editing the emoji\r\n * @param roles - The roles that can use the emoji\r\n */\r\nexport const editEmoji: ActionMethod<\r\n\t\"editEmoji\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (\r\n\tclient,\r\n\temojiIdentifier,\r\n\tguildId,\r\n\tname,\r\n\texecutorId,\r\n\treason,\r\n\t...roles\r\n) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers) !==\r\n\t\t\ttrue\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Gestire emoji e adesivi**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst emoji = guild.emojis.cache.find(\r\n\t\t(e) =>\r\n\t\t\te.id === emojiIdentifier ||\r\n\t\t\te.name === emojiIdentifier ||\r\n\t\t\te.toString() === emojiIdentifier\r\n\t);\r\n\r\n\tif (!emoji)\r\n\t\treturn {\r\n\t\t\tcontent: \"Emoji non trovata! Specifica il nome completo o l'id.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (emoji.managed ?? false)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Questa emoji è gestita da un'integrazione e non può essere modificata.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per gestire le emoji!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.ManageEmojisAndStickers |\r\n\t\t\t\t\t\t\t\tme!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\treturn emoji\r\n\t\t.edit({ roles, name, reason })\r\n\t\t.then((newEmoji) => ({\r\n\t\t\tcontent: `Emoji \\`:${\r\n\t\t\t\tnewEmoji.name ?? \"emoji\"\r\n\t\t\t}:\\` modificata con successo!`,\r\n\t\t}))\r\n\t\t.catch((error: DiscordAPIError | Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import { TimestampStyles } from \"@discordjs/builders\";\r\nimport { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tMessageOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { escapeBold } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Get information about an emoji.\r\n * @param client - The client\r\n * @param emojiIdentifier - The id of the emoji or its name\r\n * @param guildId - The id of the guild\r\n */\r\nexport const emojiInfo: ActionMethod<\r\n\t\"emojiInfo\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, emojiIdentifier, guildId) => {\r\n\tconst emoji =\r\n\t\tclient.emojis.cache.get(emojiIdentifier) ??\r\n\t\t(guildId !== undefined\r\n\t\t\t? client.guilds.cache\r\n\t\t\t\t\t.get(guildId)\r\n\t\t\t\t\t?.emojis.cache.find(\r\n\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\te.id === emojiIdentifier ||\r\n\t\t\t\t\t\t\te.name === emojiIdentifier ||\r\n\t\t\t\t\t\t\te.toString() === emojiIdentifier\r\n\t\t\t\t\t)\r\n\t\t\t: undefined);\r\n\r\n\tif (!emoji)\r\n\t\treturn {\r\n\t\t\tcontent: \"Emoji non trovata! Specifica il nome completo o l'id.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst createdTimestamp = Math.round(emoji.createdTimestamp / 1000);\r\n\tconst components: MessageOptions[\"components\"] = [];\r\n\tconst { roles } = emoji;\r\n\tconst author =\r\n\t\temoji.author ?? (await emoji.fetchAuthor().catch(() => undefined));\r\n\r\n\tif (guildId !== undefined)\r\n\t\tcomponents.push({\r\n\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\tcustom_id: createActionId(\"emojiList\", guildId),\r\n\t\t\t\t\tlabel: \"Lista emoji\",\r\n\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\temoji: {\r\n\t\t\t\t\t\tanimated: emoji.animated ?? false,\r\n\t\t\t\t\t\tname: emoji.name ?? undefined,\r\n\t\t\t\t\t\tid: emoji.id,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\treturn {\r\n\t\tcontent: `${emoji.toString()} [${emoji.name ?? \"emoji\"}](${emoji.url}) (${\r\n\t\t\temoji.id\r\n\t\t})\\n\\nAnimata: **${\r\n\t\t\temoji.animated ?? false ? \"Sì\" : \"No\"\r\n\t\t}**\\nCreata <t:${createdTimestamp}:${\r\n\t\t\tTimestampStyles.LongDateTime\r\n\t\t}> (<t:${createdTimestamp}:${\r\n\t\t\tTimestampStyles.RelativeTime\r\n\t\t}>))\\nGestita da un integrazione: **${\r\n\t\t\temoji.managed ?? false ? \"Sì\" : \"No\"\r\n\t\t}**${\r\n\t\t\tauthor ? `\\nAutore: <@${author.id}> (**${escapeBold(author.tag)}**)` : \"\"\r\n\t\t}${\r\n\t\t\troles.cache.size > 0\r\n\t\t\t\t? `\\nRuoli consentiti: ${roles.cache\r\n\t\t\t\t\t\t.map((r) => `<@&${r.id}> (**${escapeBold(r.name)}**)`)\r\n\t\t\t\t\t\t.join(\", \")}`\r\n\t\t\t\t: \"\"\r\n\t\t}`,\r\n\t\tcomponents,\r\n\t};\r\n};\r\n","import { TimestampStyles } from \"@discordjs/builders\";\r\nimport { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { Colors } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Get a list of emojis in a server.\r\n * @param client - The client\r\n * @param guildId - The id of the server\r\n * @param page - The page number\r\n */\r\nexport const emojiList: ActionMethod<\r\n\t\"emojiList\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, guildId, page = \"0\", executorId) => {\r\n\tconst pageNumber = Number(page);\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst end = pageNumber * 25 + 25;\r\n\tconst emojis = [...guild.emojis.cache.values()].slice(pageNumber * 25, end);\r\n\r\n\treturn {\r\n\t\tembeds: [\r\n\t\t\t{\r\n\t\t\t\ttitle: \"Emoji del server\",\r\n\t\t\t\tfields: emojis.map((emoji) => {\r\n\t\t\t\t\tconst createdTimestamp = Math.round(emoji.createdTimestamp / 1000);\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tname: emoji.name ?? \"emoji\",\r\n\t\t\t\t\t\tvalue: `${emoji.toString()} [${emoji.name ?? \"emoji\"}](<${\r\n\t\t\t\t\t\t\temoji.url\r\n\t\t\t\t\t\t}>) - <t:${createdTimestamp}:${\r\n\t\t\t\t\t\t\tTimestampStyles.LongDateTime\r\n\t\t\t\t\t\t}> (<t:${createdTimestamp}:${TimestampStyles.RelativeTime}>)`,\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\t\tfooter: {\r\n\t\t\t\t\ttext: `Pagina ${pageNumber + 1}/${Math.ceil(\r\n\t\t\t\t\t\tguild.emojis.cache.size / 25\r\n\t\t\t\t\t)}`,\r\n\t\t\t\t},\r\n\t\t\t\tdescription: emojis.length === 0 ? \"Nessun emoji trovata!\" : undefined,\r\n\t\t\t\tauthor: {\r\n\t\t\t\t\tname: guild.name,\r\n\t\t\t\t\ticon_url:\r\n\t\t\t\t\t\tguild.iconURL({\r\n\t\t\t\t\t\t\textension: \"png\",\r\n\t\t\t\t\t\t\tforceStatic: false,\r\n\t\t\t\t\t\t\tsize: 4096,\r\n\t\t\t\t\t\t}) ?? undefined,\r\n\t\t\t\t},\r\n\t\t\t\tcolor: Colors.Blurple,\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t},\r\n\t\t],\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\"emojiList\",\r\n\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t`${pageNumber - 1}`,\r\n\t\t\t\t\t\t\texecutorId,\r\n\t\t\t\t\t\t\t\"true\"\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\tdisabled: page === \"0\",\r\n\t\t\t\t\t\temoji: {\r\n\t\t\t\t\t\t\tname: \"⬅\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: \"Precedente\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\"emojiList\",\r\n\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t`${pageNumber + 1}`,\r\n\t\t\t\t\t\t\texecutorId,\r\n\t\t\t\t\t\t\t\"true\"\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\tdisabled: end >= guild.emojis.cache.size,\r\n\t\t\t\t\t\temoji: {\r\n\t\t\t\t\t\t\tname: \"➡\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlabel: \"Successivo\",\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Search something on Google!\r\n * @param _client - The client\r\n * @param query - The query\r\n */\r\nexport const google: ActionMethod<\r\n\t\"google\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, query) => {\r\n\tconst url = `https://google.com/search?q=${encodeURIComponent(query)}`;\r\n\r\n\treturn {\r\n\t\tcontent: url,\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tlabel: \"Apri nel browser!\",\r\n\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\temoji: { name: \"🔍\" },\r\n\t\t\t\t\t\turl,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport { escapeBold } from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Get the icon of a guild.\r\n * @param client - The client\r\n * @param guildId - The id of the guild\r\n */\r\nexport const icon: ActionMethod<\r\n\t\"icon\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client, guildId) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst iconURL = guild.iconURL({\r\n\t\textension: \"png\",\r\n\t\tforceStatic: false,\r\n\t\tsize: 4096,\r\n\t});\r\n\r\n\treturn iconURL == null\r\n\t\t? {\r\n\t\t\t\tcontent: \"Questo server non ha un'icona!\",\r\n\t\t\t\tephemeral: true,\r\n\t\t  }\r\n\t\t: {\r\n\t\t\t\tcontent: `Icona di **[${escapeBold(guild.name)}](${iconURL} )**:`,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\turl: iconURL,\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t  };\r\n};\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { escapeMarkdown } from \"discord.js\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Kick a user from a guild.\r\n * @param client - The client\r\n * @param userId - The id of the user to kick\r\n * @param guildId - The guild to kick the user from\r\n * @param executorId - The user who executed the action, if any\r\n * @param reason - The reason for the action\r\n */\r\nexport const kick: ActionMethod<\"kick\", WebhookEditMessageOptions> = async (\r\n\tclient,\r\n\tuserId,\r\n\tguildId,\r\n\texecutorId,\r\n\treason\r\n) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.KickMembers) !== true\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Espelli membri**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst member = await guild.members.fetch(userId).catch(() => null);\r\n\r\n\tif (!member)\r\n\t\treturn {\r\n\t\t\tcontent: \"L'utente non fa parte del server!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (userId === guild.ownerId)\r\n\t\treturn {\r\n\t\t\tcontent: \"Non puoi espellere il proprietario del server!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { rawPosition } = member.roles.highest;\r\n\r\n\tif (\r\n\t\texecutor &&\r\n\t\tisNotOwner &&\r\n\t\texecutor.roles.highest.rawPosition <= rawPosition\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non puoi espellere un membro con un ruolo superiore o uguale al tuo!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.KickMembers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per espellere membri!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.KickMembers | me!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\tif (me!.roles.highest.rawPosition <= rawPosition)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non posso espellere un membro con un ruolo maggiore o uguale al mio!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\r\n\treturn guild.members\r\n\t\t.kick(\r\n\t\t\tuserId,\r\n\t\t\t`${executor ? `Espulso da ${executor.user.tag} (${executorId!})` : \"\"}${\r\n\t\t\t\treason == null ? \"\" : `${executor ? \": \" : \"\"}${reason}`\r\n\t\t\t}`\r\n\t\t)\r\n\t\t.then(\r\n\t\t\t(): WebhookEditMessageOptions => ({\r\n\t\t\t\tcontent: `<@${userId}> (${escapeMarkdown(\r\n\t\t\t\t\tmember.user.tag\r\n\t\t\t\t)} - ${userId}) è stato espulso dal server!${\r\n\t\t\t\t\treason == null\r\n\t\t\t\t\t\t? \"\"\r\n\t\t\t\t\t\t: `\\n\\nMotivo: ${\r\n\t\t\t\t\t\t\t\treason.length > 1000 ? `${reason.slice(0, 1000)}...` : reason\r\n\t\t\t\t\t\t  }`\r\n\t\t\t\t}`,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\tlabel: \"Banna\",\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\tcustom_id: createActionId(\"bann\", userId, guildId, executorId),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((error: Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\n\r\n/**\r\n * Calculate the love percentage of two users.\r\n * @param _client - The client\r\n * @param user1Id - The first user's id\r\n * @param user2Id - The second user's id\r\n * @param discriminator1 - The first user's discriminator\r\n * @param discriminator2 - The second user's discriminator\r\n */\r\nexport const love: ActionMethod<\r\n\t\"love\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, user1Id, user2Id, discriminator1, discriminator2) => {\r\n\tconst bigint1 = BigInt(user1Id) * BigInt(discriminator1);\r\n\tconst bigint2 = BigInt(user2Id) * BigInt(discriminator2);\r\n\r\n\treturn {\r\n\t\tcontent: `❤️ L'amore tra <@${user1Id}> e <@${user2Id}> è del ${\r\n\t\t\tbigint1 > bigint2\r\n\t\t\t\t? (bigint2 * 100n) / bigint1\r\n\t\t\t\t: (bigint1 * 100n) / bigint2\r\n\t\t}% ❤️`,\r\n\t};\r\n};\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Pong!\r\n * @param client - The client\r\n */\r\nexport const ping: ActionMethod<\r\n\t\"ping\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (client) => ({\r\n\tcontent: `Latency is **${client.ws.ping}ms**.`,\r\n\tcomponents: [\r\n\t\t{\r\n\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\tcustom_id: createActionId(\"ping\"),\r\n\t\t\t\t\tlabel: \"Pong!\",\r\n\t\t\t\t\tstyle: ButtonStyle.Success,\r\n\t\t\t\t\temoji: { name: \"🏓\" },\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n});\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\nconst replies = [\r\n\t\"Sì\",\r\n\t\"Certamente\",\r\n\t\"Palese\",\r\n\t\"Fattuale\",\r\n\t\"Ma che me lo chiedi a fare\",\r\n\r\n\t\"No\",\r\n\t\"Impossibile\",\r\n\t\"Non ci credi nemmeno tu\",\r\n\t\"L'importante è crederci\",\r\n\t\"Mi viene da ridere solo a pensarci\",\r\n\r\n\t\"Idk\",\r\n\t\"Forse\",\r\n\t\"Opinionabile\",\r\n\t\"Chiedilo a qualcun altro\",\r\n\t\"Non ne ho la più pallida idea\",\r\n];\r\n\r\n/**\r\n * Predict something!\r\n * @param _client - The client\r\n * @param text - The text to predict\r\n */\r\nexport const predict: ActionMethod<\r\n\t\"predict\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, text) => ({\r\n\tcontent:\r\n\t\tMath.random() < 0.95\r\n\t\t\t? replies[Math.floor(Math.random() * replies.length)]\r\n\t\t\t: \"MA IO CHE CABBO NE POSSO SAPERE!!!\",\r\n\tcomponents: [\r\n\t\t{\r\n\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\tlabel: \"Chiedi nuovamente\",\r\n\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\temoji: { name: \"💬\" },\r\n\t\t\t\t\tcustom_id: createActionId(\"predict\", text),\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n});\r\n","import { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport randomNumber from \"../randomNumber\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Generate a random number between two numbers!\r\n * @param _client - The client\r\n * @param min - The minimum number\r\n * @param max - The maximum number\r\n */\r\nexport const random: ActionMethod<\r\n\t\"randomNumber\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, min, max) => {\r\n\tif (typeof min !== typeof max)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Devi specificare sia il minimo che il massimo o nessuno dei due per un numero decimale tra 0 e 1\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst minNumber = Number(min);\r\n\tconst maxNumber = Number(max);\r\n\r\n\treturn {\r\n\t\tcontent: `🎲 ${randomNumber(\r\n\t\t\t(isNaN(minNumber) ? undefined : minNumber)!,\r\n\t\t\t(isNaN(maxNumber) ? undefined : maxNumber)!\r\n\t\t)}`,\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tlabel: \"Genera un altro!\",\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\temoji: { name: \"🎲\" },\r\n\t\t\t\t\t\tcustom_id: createActionId(\"randomNumber\", min, max),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","import type {\r\n\tSlashCommandBuilder,\r\n\tSlashCommandSubcommandsOnlyBuilder,\r\n} from \"@discordjs/builders\";\r\nimport type {\r\n\tInternalRequest,\r\n\tRestEvents as DiscordRestEvents,\r\n} from \"@discordjs/rest\";\r\nimport type { Snowflake } from \"discord-api-types/v10\";\r\nimport type {\r\n\tAutocompleteInteraction,\r\n\tAwaitable,\r\n\tChatInputCommandInteraction,\r\n\tClientEvents,\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tMessageOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { Buffer } from \"node:buffer\";\r\nimport type { IncomingHttpHeaders } from \"node:http\";\r\nimport type { URL } from \"node:url\";\r\nimport type { Worker } from \"node:worker_threads\";\r\nimport type { Command, CustomClient, Event } from \".\";\r\n\r\n/**\r\n * List of actions and their arguments\r\n */\r\nexport type Actions = {\r\n\tavatar: [user: Snowflake, guild?: Snowflake];\r\n\tbann: [\r\n\t\tuser: Snowflake,\r\n\t\tguild: Snowflake,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string,\r\n\t\tdeleteMessageDays?: `${number}`,\r\n\t\tduration?: string\r\n\t];\r\n\tbanner: [user: Snowflake];\r\n\tbannList: [\r\n\t\tguild: Snowflake,\r\n\t\tpage?: `${number}`,\r\n\t\texecutor?: Snowflake,\r\n\t\tupdate?: `${boolean}`\r\n\t];\r\n\tcalc: [expr: string, fraction?: `${boolean}`];\r\n\tcat: [];\r\n\tcreateEmoji: [\r\n\t\tguild: Snowflake,\r\n\t\tattachment: Buffer | string,\r\n\t\tname: string,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string,\r\n\t\t...roles: Snowflake[]\r\n\t];\r\n\tdeleteEmoji: [\r\n\t\temoji: Snowflake | string,\r\n\t\tguild: Snowflake,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string\r\n\t];\r\n\tdice: [count?: `${number}`];\r\n\tdog: [];\r\n\teditEmoji: [\r\n\t\temoji: Snowflake | string,\r\n\t\tguild: Snowflake,\r\n\t\tname?: string,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string,\r\n\t\t...roles: Snowflake[]\r\n\t];\r\n\temojiInfo: [emoji: Snowflake | string, guild?: Snowflake];\r\n\temojiList: [\r\n\t\tguild: Snowflake,\r\n\t\tpage?: `${number}`,\r\n\t\texecutor?: Snowflake,\r\n\t\tupdate?: `${boolean}`\r\n\t];\r\n\tgoogle: [query: string];\r\n\ticon: [guild: Snowflake];\r\n\tkick: [\r\n\t\tuser: Snowflake,\r\n\t\tguild: Snowflake,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string\r\n\t];\r\n\tlove: [\r\n\t\tuser1: Snowflake,\r\n\t\tuser2: Snowflake,\r\n\t\tdiscriminator1: string,\r\n\t\tdiscriminator2: string\r\n\t];\r\n\tping: [];\r\n\tpredict: [text: string];\r\n\trandomNumber: [min?: `${number}`, max?: `${number}`];\r\n\trps: [choice: \"paper\" | \"rock\" | \"scissors\"];\r\n\ttimeout: [\r\n\t\tuser: Snowflake,\r\n\t\tguild: Snowflake,\r\n\t\ttimeout: string | null,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string\r\n\t];\r\n\ttimestamp: [\r\n\t\tyear?: `${number}`,\r\n\t\tmonth?: `${number}`,\r\n\t\tdate?: `${number}`,\r\n\t\thours?: `${number}`,\r\n\t\tminutes?: `${number}`,\r\n\t\tseconds?: `${number}`\r\n\t];\r\n\tunbann: [\r\n\t\tuser: Snowflake,\r\n\t\tguild: Snowflake,\r\n\t\texecutor?: Snowflake,\r\n\t\treason?: string\r\n\t];\r\n};\r\n\r\n/**\r\n * A function to be called when an action is executed\r\n */\r\nexport type ActionMethod<\r\n\tT extends keyof Actions,\r\n\tR extends\r\n\t\t| InteractionReplyOptions\r\n\t\t| InteractionUpdateOptions\r\n\t\t| WebhookEditMessageOptions = InteractionUpdateOptions &\r\n\t\tWebhookEditMessageOptions\r\n> = (this: void, client: CustomClient<true>, ...args: Actions[T]) => Promise<R>;\r\n\r\n/**\r\n * An action row to be sent to Discord\r\n */\r\nexport type ActionRowType = NonNullable<\r\n\tMessageOptions[\"components\"]\r\n> extends (infer T)[]\r\n\t? T\r\n\t: never;\r\n\r\n/**\r\n * Options to create a command\r\n */\r\nexport type CommandOptions = {\r\n\t/**\r\n\t * The data for this command\r\n\t */\r\n\tdata:\r\n\t\t| Omit<SlashCommandBuilder, \"addSubcommand\" | \"addSubcommandGroup\">\r\n\t\t| SlashCommandBuilder\r\n\t\t| SlashCommandSubcommandsOnlyBuilder;\r\n\r\n\t/**\r\n\t * If this command is public\r\n\t */\r\n\tisPublic?: boolean;\r\n\r\n\t/**\r\n\t * A functions to run when an autocomplete request is received by Discord.\r\n\t * @param this - The command object that called this\r\n\t * @param interaction - The interaction received\r\n\t */\r\n\tautocomplete?(\r\n\t\tthis: Command,\r\n\t\tinteraction: AutocompleteInteraction\r\n\t): Awaitable<void>;\r\n\r\n\t/**\r\n\t * A function to run when this command is received by Discord.\r\n\t * @param this - The command object that called this\r\n\t * @param interaction - The interaction received\r\n\t */\r\n\trun(this: Command, interaction: ChatInputCommandInteraction): Awaitable<void>;\r\n};\r\n\r\n/**\r\n * Type of content received from a web request\r\n */\r\nexport enum ContentType {\r\n\tJson,\r\n\tPlainText,\r\n\tBuffer,\r\n}\r\n\r\n/**\r\n * A response from thecatapi.com\r\n */\r\nexport type CatResponse = {\r\n\tbreeds: [];\r\n\tcategories: { id: number; name: string }[];\r\n\theight: number;\r\n\tid: string;\r\n\turl: string;\r\n\twidth: number;\r\n}[];\r\n\r\n/**\r\n * Custom emojis for the bot\r\n */\r\n\r\nexport enum CustomEmojis {}\r\n\r\n/**\r\n * Variables that can be stored in the database\r\n */\r\nexport type DatabaseVariables = {\r\n\ttimeouts: Timeout[];\r\n\twarns: Partial<Record<string, Record<string, Warn[]>>>;\r\n};\r\n\r\n/**\r\n * A response from thedogapi.com\r\n */\r\nexport type DogResponse = {\r\n\tbreeds: [];\r\n\theight: number;\r\n\tid: string;\r\n\turl: string;\r\n\twidth: number;\r\n}[];\r\n\r\n/**\r\n * The data for an event\r\n */\r\nexport type EventOptions<\r\n\tT extends EventType = EventType,\r\n\tK extends T extends EventType.Discord\r\n\t\t? keyof ClientEvents\r\n\t\t: T extends EventType.Process\r\n\t\t? keyof ProcessEvents\r\n\t\t: T extends EventType.Rest\r\n\t\t? keyof RestEvents\r\n\t\t: never = T extends EventType.Discord\r\n\t\t? keyof ClientEvents\r\n\t\t: T extends EventType.Process\r\n\t\t? keyof ProcessEvents\r\n\t\t: T extends EventType.Rest\r\n\t\t? keyof RestEvents\r\n\t\t: never\r\n> = {\r\n\t/**\r\n\t * The name of the event\r\n\t */\r\n\tname: K;\r\n\r\n\t/**\r\n\t * The type of the event\r\n\t */\r\n\ttype: T;\r\n\r\n\t/**\r\n\t * The function to execute when the event is received\r\n\t */\r\n\ton?: (\r\n\t\tthis: Event<T, K>,\r\n\t\t...args: T extends EventType.Discord\r\n\t\t\t? K extends keyof ClientEvents\r\n\t\t\t\t? ClientEvents[K]\r\n\t\t\t\t: never\r\n\t\t\t: T extends EventType.Process\r\n\t\t\t? K extends keyof ProcessEvents\r\n\t\t\t\t? ProcessEvents[K]\r\n\t\t\t\t: never\r\n\t\t\t: T extends EventType.Rest\r\n\t\t\t? K extends keyof RestEvents\r\n\t\t\t\t? RestEvents[K]\r\n\t\t\t\t: never\r\n\t\t\t: never\r\n\t) => Awaitable<void>;\r\n\r\n\t/**\r\n\t * The function to execute when the event is received once\r\n\t */\r\n\tonce?: EventOptions<T, K>[\"on\"];\r\n};\r\n\r\n/**\r\n * The type for an event\r\n */\r\nexport enum EventType {\r\n\tDiscord = \"discord\",\r\n\tProcess = \"process\",\r\n\tRest = \"rest\",\r\n}\r\n\r\n/**\r\n * All the face emojis\r\n */\r\nexport enum FaceEmojis {\r\n\t\":)\" = \"😊\",\r\n\t\":D\" = \"😀\",\r\n\t\":P\" = \"😛\",\r\n\t\":O\" = \"😮\",\r\n\t\":*\" = \"😗\",\r\n\t\";)\" = \"😉\",\r\n\t\":|\" = \"😐\",\r\n\t\":/\" = \"😕\",\r\n\t\":S\" = \"😖\",\r\n\t\":$\" = \"😳\",\r\n\t\":@\" = \"😡\",\r\n\t\":^)\" = \"😛\",\r\n\t\":\\\\\" = \"😕\",\r\n}\r\n\r\n/**\r\n * The match level from comparing 2 strings\r\n */\r\nexport enum MatchLevel {\r\n\t/**\r\n\t * The strings don't match at all\r\n\t */\r\n\tNone,\r\n\r\n\t/**\r\n\t * The second string is a substring of the first one\r\n\t */\r\n\tPartial,\r\n\r\n\t/**\r\n\t * The second string is at the end of the first one\r\n\t */\r\n\tEnd,\r\n\r\n\t/**\r\n\t * The second string is at the beginning of the first one\r\n\t */\r\n\tStart,\r\n\r\n\t/**\r\n\t * The second string is the same as the first one\r\n\t */\r\n\tFull,\r\n}\r\n\r\nexport type ProcessEvents = {\r\n\t[K in Signals]: [signal: K];\r\n} & {\r\n\tbeforeExit: [code: number];\r\n\tdisconnect: [];\r\n\texit: [code: number];\r\n\tmessage: [message: unknown, sendHandle: unknown];\r\n\trejectionHandled: [promise: Promise<unknown>];\r\n\tuncaughtException: [\r\n\t\terror: Error,\r\n\t\torigin: \"uncaughtException\" | \"unhandledRejection\"\r\n\t];\r\n\tuncaughtExceptionMonitor: [\r\n\t\terror: Error,\r\n\t\torigin: \"uncaughtException\" | \"unhandledRejection\"\r\n\t];\r\n\tunhandledRejection: [reason: unknown, promise: Promise<unknown>];\r\n\twarning: [warning: Error];\r\n\tworker: [worker: Worker];\r\n};\r\n\r\n/**\r\n * A promise for the queue\r\n */\r\nexport type QueuePromise = { promise: Promise<void>; resolve(): void };\r\n\r\n/**\r\n * A response from a web request\r\n */\r\nexport type RequestResponse<R> = {\r\n\tdata: R;\r\n\tcomplete: boolean;\r\n\theaders: IncomingHttpHeaders;\r\n\tstatusCode: number;\r\n\tstatusMessage: string;\r\n};\r\n\r\n/**\r\n * Events for the rest\r\n */\r\nexport type RestEvents = DiscordRestEvents & {\r\n\trequest: [options: InternalRequest];\r\n};\r\n\r\n/**\r\n * Emojis for Rock Paper Scissors\r\n */\r\nexport enum RPSEmojis {\r\n\trock = \"✊\",\r\n\tpaper = \"✋\",\r\n\tscissors = \"✌\",\r\n}\r\n\r\n/**\r\n * Nodejs signals\r\n */\r\nexport type Signals =\r\n\t| \"SIGABRT\"\r\n\t| \"SIGALRM\"\r\n\t| \"SIGBREAK\"\r\n\t| \"SIGBUS\"\r\n\t| \"SIGCHLD\"\r\n\t| \"SIGCONT\"\r\n\t| \"SIGFPE\"\r\n\t| \"SIGHUP\"\r\n\t| \"SIGILL\"\r\n\t| \"SIGINFO\"\r\n\t| \"SIGINT\"\r\n\t| \"SIGIO\"\r\n\t| \"SIGIOT\"\r\n\t| \"SIGKILL\"\r\n\t| \"SIGLOST\"\r\n\t| \"SIGPIPE\"\r\n\t| \"SIGPOLL\"\r\n\t| \"SIGPROF\"\r\n\t| \"SIGPWR\"\r\n\t| \"SIGQUIT\"\r\n\t| \"SIGSEGV\"\r\n\t| \"SIGSTKFLT\"\r\n\t| \"SIGSTOP\"\r\n\t| \"SIGSYS\"\r\n\t| \"SIGTERM\"\r\n\t| \"SIGTRAP\"\r\n\t| \"SIGTSTP\"\r\n\t| \"SIGTTIN\"\r\n\t| \"SIGTTOU\"\r\n\t| \"SIGUNUSED\"\r\n\t| \"SIGURG\"\r\n\t| \"SIGUSR1\"\r\n\t| \"SIGUSR2\"\r\n\t| \"SIGVTALRM\"\r\n\t| \"SIGWINCH\"\r\n\t| \"SIGXCPU\"\r\n\t| \"SIGXFSZ\";\r\n\r\n/**\r\n * A timeout\r\n */\r\nexport type Timeout = {\r\n\tdate: number;\r\n\targs: string[];\r\n\tname: string;\r\n};\r\n\r\n/**\r\n * A valid url\r\n */\r\nexport type Url = URL | `http${\"\" | \"s\"}://${string}`;\r\n\r\n/**\r\n * The json representation of a member warn\r\n */\r\nexport type Warn = {\r\n\tcreatedAt: number;\r\n\texecutor: Snowflake;\r\n\treason: string;\r\n};\r\n","import type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport randomNumber from \"../randomNumber\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { RPSEmojis } from \"../types\";\r\n\r\nconst rpsChoices = [\"rock\", \"paper\", \"scissors\"] as const;\r\nconst winners: Record<typeof rpsChoices[number], typeof rpsChoices[number]> = {\r\n\trock: \"paper\",\r\n\tpaper: \"scissors\",\r\n\tscissors: \"rock\",\r\n};\r\n\r\n/**\r\n * Play a game of Rock, Paper, Scissors.\r\n * @param _ - The client\r\n * @param choice - The choice\r\n */\r\nexport const rps: ActionMethod<\r\n\t\"rps\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_, choice) => {\r\n\tconst botChoice = rpsChoices[randomNumber(0, 2)];\r\n\r\n\treturn {\r\n\t\tcontent: `Hai scelto ${RPSEmojis[choice]}\\nLa mia scelta è ${\r\n\t\t\tRPSEmojis[botChoice]\r\n\t\t}\\n\\n**${\r\n\t\t\tbotChoice === choice\r\n\t\t\t\t? \"Pareggio\"\r\n\t\t\t\t: winners[botChoice] === choice\r\n\t\t\t\t? \"Hai vinto\"\r\n\t\t\t\t: \"Hai perso\"\r\n\t\t}**!`,\r\n\t};\r\n};\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type { WebhookEditMessageOptions } from \"discord.js\";\r\nimport { escapeMarkdown } from \"discord.js\";\r\nimport ms from \"ms\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Timeout a member in a guild.\r\n * @param client - The client\r\n * @param userId - The id of the user to timeout\r\n * @param guildId - The guild to timeout the user from\r\n * @param timeoutStr - The amount of time to timeout the user for,\r\n * @param executorId - The user who executed the action, if any\r\n * @param reason - The reason for the action\r\n */\r\nexport const timeout: ActionMethod<\r\n\t\"timeout\",\r\n\tWebhookEditMessageOptions\r\n> = async (client, userId, guildId, timeoutStr, executorId, reason) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.ModerateMembers) !== true\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Metti i membri in Time out**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst member = await guild.members.fetch(userId).catch(() => null);\r\n\r\n\tif (!member)\r\n\t\treturn {\r\n\t\t\tcontent: \"L'utente non fa parte del server!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (userId === guild.ownerId)\r\n\t\treturn {\r\n\t\t\tcontent: \"Non puoi applicare il Time out al proprietario del server!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { rawPosition } = member.roles.highest;\r\n\r\n\tif (\r\n\t\texecutor &&\r\n\t\tisNotOwner &&\r\n\t\texecutor.roles.highest.rawPosition <= rawPosition\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non puoi applicare il Time out ad un membro con un ruolo superiore o uguale al tuo!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.ModerateMembers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per mettere i membri in Time out!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.ModerateMembers | me!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\tif (me!.roles.highest.rawPosition <= rawPosition)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non posso applicare il Time out ad un membro con un ruolo maggiore o uguale al mio!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\t// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n\tconst duration = timeoutStr ? ms(timeoutStr) : null;\r\n\tconst oldTimeout = member.communicationDisabledUntilTimestamp;\r\n\tconst timestamp =\r\n\t\tduration == null ? null : Math.round((Date.now() + duration) / 1000);\r\n\r\n\tif (timeoutStr == null && !member.isCommunicationDisabled())\r\n\t\treturn {\r\n\t\t\tcontent: \"L'utente non è in Time out!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tif (\r\n\t\t(duration as string | null | undefined) === undefined ||\r\n\t\t(duration != null && (isNaN(duration) || duration <= 1_000))\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"La durata del Time out non è valida! Specifica una durata valida maggiore di 1 secondo.\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\treturn member\r\n\t\t.timeout(\r\n\t\t\tduration,\r\n\t\t\t`${\r\n\t\t\t\texecutor\r\n\t\t\t\t\t? `${duration == null ? \"Annullato\" : \"Applicato\"} da ${\r\n\t\t\t\t\t\t\texecutor.user.tag\r\n\t\t\t\t\t  } (${executorId!})`\r\n\t\t\t\t\t: \"\"\r\n\t\t\t}${reason == null ? \"\" : `${executor ? \": \" : \"\"}${reason}`}`\r\n\t\t)\r\n\t\t.then(\r\n\t\t\t(): WebhookEditMessageOptions =>\r\n\t\t\t\tduration == null\r\n\t\t\t\t\t? {\r\n\t\t\t\t\t\t\tcontent: `Ho annullato il Time out a <@${userId}> (${escapeMarkdown(\r\n\t\t\t\t\t\t\t\tmember.user.tag\r\n\t\t\t\t\t\t\t)} - ${userId})!`,\r\n\t\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\t\t\t\tlabel: \"Applica nuovamente\",\r\n\t\t\t\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"timeout\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tuserId,\r\n\t\t\t\t\t\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t`${oldTimeout! - Date.now()}ms`,\r\n\t\t\t\t\t\t\t\t\t\t\t\texecutorId\r\n\t\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t: {\r\n\t\t\t\t\t\t\tcontent: `<@${userId}> (${escapeMarkdown(\r\n\t\t\t\t\t\t\t\tmember.user.tag\r\n\t\t\t\t\t\t\t)} - ${userId}) è stato messo in timeout fino a <t:${timestamp!}:F> (<t:${timestamp!}:R>)!${\r\n\t\t\t\t\t\t\t\treason == null\r\n\t\t\t\t\t\t\t\t\t? \"\"\r\n\t\t\t\t\t\t\t\t\t: `\\n\\nMotivo: ${\r\n\t\t\t\t\t\t\t\t\t\t\treason.length > 1000\r\n\t\t\t\t\t\t\t\t\t\t\t\t? `${reason.slice(0, 1000)}...`\r\n\t\t\t\t\t\t\t\t\t\t\t\t: reason\r\n\t\t\t\t\t\t\t\t\t  }`\r\n\t\t\t\t\t\t\t}`,\r\n\t\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\t\t\t\tlabel: \"Annulla\",\r\n\t\t\t\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\t\t\t\tcustom_id: createActionId(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"timeout\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tuserId,\r\n\t\t\t\t\t\t\t\t\t\t\t\tguildId,\r\n\t\t\t\t\t\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\t\t\t\t\t\texecutorId\r\n\t\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t  }\r\n\t\t)\r\n\t\t.catch((error: Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import { TimestampStyles } from \"@discordjs/builders\";\r\nimport { ButtonStyle, ComponentType } from \"discord-api-types/v10\";\r\nimport type {\r\n\tInteractionReplyOptions,\r\n\tInteractionUpdateOptions,\r\n\tWebhookEditMessageOptions,\r\n} from \"discord.js\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\nconst styles = Object.values(TimestampStyles);\r\n\r\n/**\r\n * Generate a Discord timestamp!\r\n * @param _client - The client\r\n * @param year - The year\r\n * @param month - The month\r\n * @param date - The month date\r\n * @param hours - The hour\r\n * @param minutes - The minute\r\n * @param seconds - The second\r\n */\r\nexport const timestamp: ActionMethod<\r\n\t\"timestamp\",\r\n\tInteractionReplyOptions & InteractionUpdateOptions & WebhookEditMessageOptions\r\n> = async (_client, year, month, date = \"1\", hours, minutes, seconds) => {\r\n\tif (typeof year !== typeof month)\r\n\t\treturn {\r\n\t\t\tephemeral: true,\r\n\t\t\tcontent:\r\n\t\t\t\t\"Una timestamp personalizzata richiede sia l'anno che il mese! Se non vuoi una timestamp personalizzata non inserire alcun valore.\",\r\n\t\t};\r\n\tconst d = Math.round(\r\n\t\t(year === undefined\r\n\t\t\t? new Date()\r\n\t\t\t: new Date(\r\n\t\t\t\t\tNumber(year),\r\n\t\t\t\t\tNumber(month) - 1,\r\n\t\t\t\t\tNumber(date),\r\n\t\t\t\t\tNumber(hours ?? 0),\r\n\t\t\t\t\tNumber(minutes ?? 0),\r\n\t\t\t\t\tNumber(seconds ?? 0)\r\n\t\t\t  )\r\n\t\t).getTime() / 1000\r\n\t);\r\n\r\n\treturn {\r\n\t\tcontent: `<t:${d}> (\\`<t:${d}>\\`)\\n\\n${styles\r\n\t\t\t.map((style) => `<t:${d}:${style}> (\\`<t:${d}:${style}>\\`)`)\r\n\t\t\t.join(\"\\n\")}`,\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\tlabel: \"Genera nuova!\",\r\n\t\t\t\t\t\tcustom_id: createActionId(\"timestamp\"),\r\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\r\n\t\t\t\t\t\temoji: { name: \"⌚\" },\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n","import {\r\n\tButtonStyle,\r\n\tComponentType,\r\n\tOAuth2Scopes,\r\n\tPermissionFlagsBits,\r\n} from \"discord-api-types/v10\";\r\nimport type { DiscordAPIError, WebhookEditMessageOptions } from \"discord.js\";\r\nimport { escapeMarkdown } from \"discord.js\";\r\nimport CustomClient from \"../CustomClient\";\r\nimport type { ActionMethod } from \"../types\";\r\nimport { createActionId } from \"./actions\";\r\n\r\n/**\r\n * Unbann a user from a guild.\r\n * @param client - The client\r\n * @param userId - The id of the user to unbann\r\n * @param guildId - The guild to unbann the user from\r\n * @param executorId - The user who executed the action, if any\r\n * @param reason - The reason for the action\r\n */\r\nexport const unbann: ActionMethod<\"unbann\", WebhookEditMessageOptions> = async (\r\n\tclient,\r\n\tuserId,\r\n\tguildId,\r\n\texecutorId,\r\n\treason\r\n) => {\r\n\tconst guild = client.guilds.cache.get(guildId)!;\r\n\tconst executor =\r\n\t\texecutorId === undefined\r\n\t\t\t? null\r\n\t\t\t: await guild.members.fetch(executorId).catch(() => null);\r\n\tconst isNotOwner = executorId !== guild.ownerId;\r\n\r\n\tif (\r\n\t\tisNotOwner &&\r\n\t\texecutor?.permissions.has(PermissionFlagsBits.BanMembers) !== true\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non hai abbastanza permessi per usare questo comando!\\nPermessi richiesti: **Bannare i membri**\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\tconst { me } = guild.members;\r\n\r\n\tif (!me!.permissions.has(PermissionFlagsBits.BanMembers))\r\n\t\treturn {\r\n\t\t\tcontent:\r\n\t\t\t\t\"Non ho i permessi per sbannare membri!\\nPer favore, autorizzami cliccando il pulsante qui sotto.\",\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl: `https://discord.com/api/oauth2/authorize?client_id=${\r\n\t\t\t\t\t\t\t\tclient.application.id\r\n\t\t\t\t\t\t\t}&permissions=${\r\n\t\t\t\t\t\t\t\tPermissionFlagsBits.BanMembers | me!.permissions.bitfield\r\n\t\t\t\t\t\t\t}&scope=${OAuth2Scopes.Bot}&guild_id=${guildId}`,\r\n\t\t\t\t\t\t\tlabel: \"Autorizza\",\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\tif (\r\n\t\t!guild.bans.cache.has(userId) &&\r\n\t\t!(await guild.bans.fetch().then((bans) => bans.has(userId)))\r\n\t)\r\n\t\treturn {\r\n\t\t\tcontent: \"Questo utente non è bannato!\",\r\n\t\t\tephemeral: true,\r\n\t\t};\r\n\treturn Promise.all([\r\n\t\tclient.users.fetch(userId),\r\n\t\tguild.members.unban(\r\n\t\t\tuserId,\r\n\t\t\t`${executor ? `Sbannato da ${executor.user.tag} (${executorId!})` : \"\"}${\r\n\t\t\t\treason == null ? \"\" : `${executor ? \": \" : \"\"}${reason}`\r\n\t\t\t}`\r\n\t\t),\r\n\t])\r\n\t\t.then(\r\n\t\t\t([unbanned]): WebhookEditMessageOptions => ({\r\n\t\t\t\tcontent: `Ho revocato il bann per <@${userId}> (${escapeMarkdown(\r\n\t\t\t\t\tunbanned.tag\r\n\t\t\t\t)} - ${userId})!${\r\n\t\t\t\t\treason == null\r\n\t\t\t\t\t\t? \"\"\r\n\t\t\t\t\t\t: `\\n\\nMotivo: ${\r\n\t\t\t\t\t\t\t\treason.length > 1000 ? `${reason.slice(0, 1000)}...` : reason\r\n\t\t\t\t\t\t  }`\r\n\t\t\t\t}`,\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\t\tlabel: \"Banna di nuovo\",\r\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Danger,\r\n\t\t\t\t\t\t\t\tcustom_id: createActionId(\"bann\", userId, guildId, executorId),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch((error: DiscordAPIError | Error) => {\r\n\t\t\tCustomClient.printToStderr(error);\r\n\t\t\treturn {\r\n\t\t\t\tcontent: `Si è verificato un errore: \\`${error.message}\\``,\r\n\t\t\t\tephemeral: true,\r\n\t\t\t};\r\n\t\t});\r\n};\r\n","import { promises } from \"node:fs\";\r\nimport { URL } from \"node:url\";\r\nimport type { CommandOptions, CustomClient } from \".\";\r\nimport Command from \"./Command\";\r\nimport Constants from \"./Constants\";\r\n\r\n/**\r\n * Loads all commands from the commands directory.\r\n * @param client - The client to load commands into\r\n */\r\nexport const loadCommands = async (client: CustomClient) => {\r\n\tconst fileNames = await promises.readdir(\r\n\t\tnew URL(Constants.commandsFolderName, import.meta.url)\r\n\t);\r\n\tconst files = await Promise.all(\r\n\t\tfileNames\r\n\t\t\t.filter((fileName) => fileName.endsWith(\".js\"))\r\n\t\t\t.map(\r\n\t\t\t\t(fileName) =>\r\n\t\t\t\t\timport(`./${Constants.commandsFolderName}/${fileName}`) as Promise<{\r\n\t\t\t\t\t\tcommand: CommandOptions;\r\n\t\t\t\t\t}>\r\n\t\t\t)\r\n\t);\r\n\tconst commands = files.map((file) => file.command);\r\n\tfor (const command of commands)\r\n\t\tclient.commands.set(command.data.name, new Command(client, command));\r\n};\r\n\r\nexport default loadCommands;\r\n","/* eslint-disable @typescript-eslint/member-ordering */\r\nimport type {\r\n\tAutocompleteInteraction,\r\n\tChatInputCommandInteraction,\r\n} from \"discord.js\";\r\nimport { env } from \"node:process\";\r\nimport type { CommandOptions } from \".\";\r\nimport CustomClient from \"./CustomClient\";\r\n\r\n/**\r\n * A class representing a Discord slash command\r\n */\r\nexport class Command {\r\n\t/**\r\n\t * The client that instantiated this\r\n\t */\r\n\treadonly client: CustomClient<true>;\r\n\r\n\t/**\r\n\t * The Discord data for this command\r\n\t */\r\n\tdata!: CommandOptions[\"data\"];\r\n\r\n\t/**\r\n\t * If this command is public\r\n\t */\r\n\tisPublic = false;\r\n\r\n\t/**\r\n\t * The function to handle the autocomplete of this command\r\n\t */\r\n\tprivate _autocomplete: OmitThisParameter<CommandOptions[\"autocomplete\"]>;\r\n\r\n\t/**\r\n\t * The function provided to handle the command received\r\n\t */\r\n\tprivate _execute!: OmitThisParameter<CommandOptions[\"run\"]>;\r\n\r\n\t/**\r\n\t * @param options - Options for this command\r\n\t */\r\n\tconstructor(client: CustomClient, options: CommandOptions) {\r\n\t\tthis.client = client;\r\n\r\n\t\tthis.patch(options);\r\n\t}\r\n\r\n\t/**\r\n\t * The name of this command\r\n\t */\r\n\tget name() {\r\n\t\treturn this.data.name;\r\n\t}\r\n\tset name(name) {\r\n\t\tthis.data.setName(name);\r\n\t}\r\n\r\n\t/**\r\n\t * The description of this command\r\n\t */\r\n\tget description() {\r\n\t\treturn this.data.description;\r\n\t}\r\n\tset description(description) {\r\n\t\tthis.data.setDescription(description);\r\n\t}\r\n\r\n\t/**\r\n\t * Autocomplete this command.\r\n\t * @param interaction - The interaction received\r\n\t */\r\n\tasync autocomplete(interaction: AutocompleteInteraction) {\r\n\t\ttry {\r\n\t\t\tif (this.isPublic || interaction.user.id === env.OWNER_ID)\r\n\t\t\t\tawait this._autocomplete?.(interaction);\r\n\t\t} catch (message) {\r\n\t\t\tCustomClient.printToStderr(message, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Patch this command\r\n\t * @param options - Options for this command\r\n\t */\r\n\tpatch(options: Partial<CommandOptions>) {\r\n\t\tif (options.data !== undefined) this.data = options.data;\r\n\t\tif (options.autocomplete !== undefined)\r\n\t\t\tthis._autocomplete = options.autocomplete.bind(this);\r\n\t\tif (options.isPublic !== undefined) this.isPublic = options.isPublic;\r\n\t\tif (options.run !== undefined) this._execute = options.run.bind(this);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Run this command.\r\n\t * @param interaction - The interaction received\r\n\t */\r\n\tasync run(interaction: ChatInputCommandInteraction) {\r\n\t\ttry {\r\n\t\t\tif (this.isPublic || interaction.user.id === env.OWNER_ID)\r\n\t\t\t\tawait this._execute(interaction);\r\n\t\t} catch (message) {\r\n\t\t\tCustomClient.printToStderr(message, true);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Command;\r\n","import { promises } from \"node:fs\";\r\nimport { join } from \"node:path\";\r\nimport { URL } from \"node:url\";\r\nimport type { CustomClient, EventOptions, EventType } from \".\";\r\nimport Constants from \"./Constants\";\r\nimport Event from \"./Event\";\r\n\r\n/**\r\n * Load events listeners for the client.\r\n * @param client - The client to load the events for\r\n * @param subfolder - The subfolder to load the events from\r\n */\r\nexport const loadEvents = async (\r\n\tclient: CustomClient,\r\n\tsubfolder: EventType\r\n) => {\r\n\tconst fileNames = await promises.readdir(\r\n\t\tnew URL(join(Constants.eventsFolderName, subfolder), import.meta.url)\r\n\t);\r\n\tconst files = await Promise.all(\r\n\t\tfileNames\r\n\t\t\t.filter((fileName) => fileName.endsWith(\".js\"))\r\n\t\t\t.map(\r\n\t\t\t\t(fileName) =>\r\n\t\t\t\t\timport(\r\n\t\t\t\t\t\t`./${Constants.eventsFolderName}/${subfolder}/${fileName}`\r\n\t\t\t\t\t) as Promise<{\r\n\t\t\t\t\t\tevent: EventOptions;\r\n\t\t\t\t\t}>\r\n\t\t\t)\r\n\t);\r\n\tconst events = files.map((file) => file.event);\r\n\tfor (const event of events)\r\n\t\tclient.events.set(event.name, new Event(client, event));\r\n};\r\n\r\nexport default loadEvents;\r\n","import type { Client, ClientEvents as DiscordEvents } from \"discord.js\";\r\nimport process from \"node:process\";\r\nimport type { CustomClient, EventOptions, ProcessEvents, RestEvents } from \".\";\r\nimport { EventType } from \"./types\";\r\n\r\n/**\r\n * A class representing a client event\r\n */\r\nexport class Event<\r\n\tT extends EventType = EventType,\r\n\tK extends T extends EventType.Discord\r\n\t\t? keyof DiscordEvents\r\n\t\t: T extends EventType.Process\r\n\t\t? keyof ProcessEvents\r\n\t\t: T extends EventType.Rest\r\n\t\t? keyof RestEvents\r\n\t\t: never = T extends EventType.Discord\r\n\t\t? keyof DiscordEvents\r\n\t\t: T extends EventType.Process\r\n\t\t? keyof ProcessEvents\r\n\t\t: T extends EventType.Rest\r\n\t\t? keyof RestEvents\r\n\t\t: never\r\n> {\r\n\t/**\r\n\t * The client that instantiated this event\r\n\t */\r\n\treadonly client: CustomClient;\r\n\r\n\t/**\r\n\t * The name of this event\r\n\t */\r\n\treadonly name: K;\r\n\r\n\t/**\r\n\t * The type of this event\r\n\t */\r\n\treadonly type: T;\r\n\r\n\t/**\r\n\t * The function to call when this event is emitted\r\n\t */\r\n\ton?: OmitThisParameter<NonNullable<EventOptions<T, K>[\"on\"]>>;\r\n\r\n\t/**\r\n\t * The function to call when this event is emitted once\r\n\t */\r\n\tonce?: Event<T, K>[\"on\"];\r\n\r\n\t/**\r\n\t * @param client - The client that instantiated this event\r\n\t * @param data - The data to use to create this event\r\n\t */\r\n\tconstructor(client: CustomClient, data: EventOptions<T, K>) {\r\n\t\tthis.client = client;\r\n\t\tthis.name = data.name;\r\n\t\tthis.type = data.type;\r\n\t\tthis.patch(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Patches this event with the given data.\r\n\t * @param data - The data to use to create this event\r\n\t */\r\n\tpatch(data: Partial<EventOptions<T, K>>) {\r\n\t\tthis.removeListeners();\r\n\r\n\t\tif (data.on !== undefined)\r\n\t\t\tthis.on = data.on.bind<EventOptions<T, K>[\"on\"]>(this);\r\n\t\tif (data.once !== undefined)\r\n\t\t\tthis.once = data.once.bind<EventOptions<T, K>[\"once\"]>(this);\r\n\r\n\t\tthis.addListeners();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds these listeners to the client.\r\n\t */\r\n\taddListeners(): void {\r\n\t\tif (this.on)\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase EventType.Discord:\r\n\t\t\t\t\tthis.client.on(\r\n\t\t\t\t\t\tthis.name as keyof DiscordEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<Client[\"on\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Rest:\r\n\t\t\t\t\tthis.client.rest.on(\r\n\t\t\t\t\t\tthis.name as keyof RestEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<Client[\"rest\"][\"on\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Process:\r\n\t\t\t\t\tprocess.on(\r\n\t\t\t\t\t\tthis.name as keyof ProcessEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<typeof process.on>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\tif (this.once)\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase EventType.Discord:\r\n\t\t\t\t\tthis.client.once(\r\n\t\t\t\t\t\tthis.name as keyof DiscordEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<Client[\"once\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Rest:\r\n\t\t\t\t\tthis.client.rest.once(\r\n\t\t\t\t\t\tthis.name as keyof RestEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<Client[\"rest\"][\"once\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Process:\r\n\t\t\t\t\tprocess.once(\r\n\t\t\t\t\t\tthis.name as keyof ProcessEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<typeof process.once>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this event.\r\n\t */\r\n\tremoveListeners(): void {\r\n\t\tif (this.on)\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase EventType.Discord:\r\n\t\t\t\t\tthis.client.off(\r\n\t\t\t\t\t\tthis.name as keyof DiscordEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<Client[\"on\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Rest:\r\n\t\t\t\t\tthis.client.rest.off(\r\n\t\t\t\t\t\tthis.name as keyof RestEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<Client[\"rest\"][\"on\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Process:\r\n\t\t\t\t\tprocess.off(\r\n\t\t\t\t\t\tthis.name as keyof ProcessEvents,\r\n\t\t\t\t\t\tthis.on as Parameters<typeof process.on>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\tif (this.once)\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase EventType.Discord:\r\n\t\t\t\t\tthis.client.off(\r\n\t\t\t\t\t\tthis.name as keyof DiscordEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<Client[\"once\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Rest:\r\n\t\t\t\t\tthis.client.rest.off(\r\n\t\t\t\t\t\tthis.name as keyof RestEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<Client[\"rest\"][\"on\"]>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.Process:\r\n\t\t\t\t\tprocess.off(\r\n\t\t\t\t\t\tthis.name as keyof ProcessEvents,\r\n\t\t\t\t\t\tthis.once as Parameters<typeof process.once>[1]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t}\r\n}\r\n\r\nexport default Event;\r\n"],"mappings":"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","names":[]}