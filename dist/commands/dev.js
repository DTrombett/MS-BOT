import{d as T}from"../chunk-4KDV7KKW.js";import{d as r}from"../chunk-OT6DYTTJ.js";import"../chunk-B7NPBJ6H.js";import{bold as d,codeBlock as S,inlineCode as k,SlashCommandBuilder as z,time as h,TimestampStyles as M}from"@discordjs/builders";import{ComponentType as x,TextInputStyle as L}from"discord-api-types/v10";import{Colors as m,escapeCodeBlock as b,escapeInlineCode as P}from"discord.js";import{exec as U,execFile as j}from"node:child_process";import{createReadStream as q,createWriteStream as H}from"node:fs";import{unlink as I}from"node:fs/promises";import{argv as W,cwd as F,env as G,exit as J,memoryUsage as K,stderr as A,stdout as E,uptime as Q}from"node:process";var f=e=>Math.round(e/1024/1024*100)/100,_=/,\s{0,}/g,se={data:new z().setName("dev").setDescription("Comandi privati disponibili solo ai sviluppatori").setDefaultPermission(!1).addSubcommand(e=>e.setName("shell").setDescription("Esegue un comando nel terminal").addStringOption(t=>t.setName("cmd").setDescription("Comando da eseguire").setRequired(!0)).addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("eval").setDescription("Esegue del codice").addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("ram").setDescription("Mostra la RAM utilizzata").addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("restart").setDescription("Riavvia il bot").addBooleanOption(t=>t.setName("process").setDescription("Se riavviare il processo (default: true)")).addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("shutdown").setDescription("Spegni il bot").addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("uptime").setDescription("Mostra l'uptime del bot").addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("pull").setDescription("Aggiorna il bot").addBooleanOption(t=>t.setName("rebuild").setDescription("Ricompila il progetto con i nuovi cambiamenti")).addBooleanOption(t=>t.setName("synccommands").setDescription("Sincronizza i comandi con Discord")).addBooleanOption(t=>t.setName("restart").setDescription("Riavvia il processo")).addBooleanOption(t=>t.setName("packages").setDescription("Aggiorna i pacchetti")).addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("cpp").setDescription("Compila il codice").addStringOption(t=>t.setName("code").setDescription("Codice da compilare").setRequired(!0)).addStringOption(t=>t.setName("include").setDescription("Librerie da includere, separate da virgola (default: iostream)")).addStringOption(t=>t.setName("namespaces").setDescription("Namespaces da usare (default: std)")).addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("logs").setDescription("Mostra i log del bot").addIntegerOption(t=>t.setName("lines").setDescription("Numero di righe da mostrare (default: max)")).addBooleanOption(t=>t.setName("ephemeral").setDescription("Scegli se mostrare il risultato privatamente (default: true)"))).addSubcommand(e=>e.setName("test").setDescription("Un comando di test")),async run(e){let t=e.options.getBoolean("ephemeral")??!0,$=e.options.getSubcommand();$!=="eval"&&await e.deferReply({ephemeral:t});let p=Date.now(),D,a,w,C,u,n,g,i,l,s,O;switch($){case"shell":w=e.options.getString("cmd",!0),a=U(w),s="",a.stdout?.on("data",o=>s+=o.toString()),a.stderr?.on("data",o=>s+=o.toString()),a.stderr?.pipe(A),a.stdout?.pipe(E),n=await new Promise(o=>{a.once("close",o)}),await e.editReply({content:`Comando eseguito in ${Date.now()-p}ms
${k(`${F()}> ${P(w.slice(0,2e3-100))}`)}`,embeds:[{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"Output",description:S(b(s.slice(0,4096-7))),color:n?m.Red:m.Green,timestamp:new Date().toISOString()}]});break;case"eval":await e.showModal({title:"Eval",custom_id:`eval-${t?"eph":""}`,components:[{type:x.ActionRow,components:[{label:"TypeScript code",style:L.Paragraph,custom_id:"code",type:x.TextInput,required:!0,placeholder:"The code to be formatted with Prettier and compiled by TypeScript..."}]}]});break;case"ram":l=K(),await e.editReply({content:`Memoria calcolata in ${Date.now()-p}ms`,embeds:[{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"RAM",description:`${d("Resident Set Size")}: ${f(l.rss)} MB
${d("Heap Total")}: ${f(l.heapTotal)} MB
${d("Heap Used")}: ${f(l.heapUsed)} MB
${d("External")}: ${f(l.external)} MB`,color:Math.round(l.rss/1024/1024*16777215/500),timestamp:new Date().toISOString()}]});break;case"restart":e.options.getBoolean("process")??!0?(await e.editReply({content:`Sto facendo ripartire il programma con i seguenti argv:
${W.map(o=>k(P(o))).join(`
`)}`}),T(this.client)):(this.client.destroy(),this.client.token=G.DISCORD_TOKEN,await this.client.login(),await e.editReply({content:`Ricollegato in ${Date.now()-p}ms.`}));break;case"shutdown":return await e.editReply({content:"Sto spegnendo il bot..."}),this.client.destroy(),J(0);case"uptime":O=new Date(Date.now()-Q()*1e3),D=new Date(Date.now()-this.client.uptime),await e.editReply({content:`Process uptime calcolato in ${d(`${Date.now()-p}ms`)}`,embeds:[{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"Uptime",description:`${d("Processo")}: ${h(O,M.RelativeTime)} (${h(O)})
${d("Bot")}: ${h(D,M.RelativeTime)} (${h(D)})`,color:m.Blurple,timestamp:new Date().toISOString()}]});break;case"cpp":let R=e.options.getString("code",!0);if(C=`${(e.options.getString("include")??"iostream").split(_).map(o=>`#include <${o}>`).join(`
`)}
${(e.options.getString("namespaces")??"std").split(_).map(o=>`using namespace ${o};`).join(`
`)}

int main() {
	${R}${R.endsWith(";")?"":";"}
}`,u=await new Promise(o=>{H("./tmp/cpp.cpp").once("error",o).once("finish",o).setDefaultEncoding("utf8").end(C)}),u){r.printToStderr(u),await e.editReply({content:`Errore durante la creazione del file: ${r.inspect(u)}`});break}if(a=U("g++ ./tmp/cpp.cpp -o ./tmp/cpp.exe"),s="",a.stdout?.on("data",o=>s+=o),a.stderr?.on("data",o=>s+=o),a.stdout?.pipe(E),a.stderr?.pipe(A),n=await new Promise(o=>{a.once("close",o)}),I("./tmp/cpp.cpp").catch(r.printToStderr),n){await e.editReply({content:`Errore durante la compilazione del codice C++
Codice di errore: ${n}`,embeds:[{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"Output",description:S(b(s.slice(0,4096-7))),color:m.Red,timestamp:new Date().toISOString()},{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"Codice C++",description:S("cpp",b(C.slice(0,4096-7))),color:m.Blurple,timestamp:new Date().toISOString()}]});break}let v=e.channel?.createMessageCollector({filter:o=>o.author.id===e.user.id}),N=o=>{s+=o,e.editReply({content:s}).catch(r.printToStderr)};s="",a=j("./tmp/cpp.exe"),a.stderr?.on("data",N),a.stdout?.on("data",N),v?.on("collect",o=>{let c=`${o.content}
`;o.delete().catch(r.printToStderr),s+=c,a.stdin?.write(c)}),n=await new Promise(o=>{a.once("close",o)}),v?.stop(),I("./tmp/cpp.exe").catch(r.printToStderr),await e.editReply({content:`${s}

**Processo terminato in ${Date.now()-p}ms con codice ${n}**`});break;case"logs":if(i=await new Promise(o=>{let c="";q("./debug.log").setEncoding("utf8").on("data",y=>c+=y).once("end",()=>{o(c.split(`
`))}).once("error",y=>{e.editReply({content:`Errore durante la lettura del file di log: ${r.inspect(y)}`}).catch(r.printToStderr),o([])})}),!i.length)break;let{length:B}=i;for(g=e.options.getInteger("lines"),g!=null&&g>0&&(i=i.slice(Math.max(0,B-g-1)));i.join(`
`).length>4096-7;)i.shift();await e.editReply({content:`Logs letti in ${Date.now()-p}ms
Righe totali: ${B}
Righe visualizzate: ${i.length}`,embeds:[{author:{name:e.user.tag,icon_url:e.user.displayAvatarURL()},title:"Logs",description:S(b(i.slice(0,4096-7).join(`
`))),color:m.Blurple,timestamp:new Date().toISOString()}]});break;case"test":break;default:await e.editReply("Comando non riconosciuto")}}};export{se as command};
//# sourceMappingURL=dev.js.map