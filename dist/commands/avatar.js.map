{"version":3,"sources":["../../src/commands/avatar.ts","../../src/util/Constants.ts","../../src/util/CustomClient.ts","../../src/util/loadCommands.ts","../../src/util/createCommand.ts","../../src/util/watchChanges.ts"],"sourcesContent":["import {\r\n\tApplicationCommandOptionType,\r\n\tApplicationCommandType,\r\n\tButtonStyle,\r\n\tComponentType,\r\n} from \"discord-api-types/v10\";\r\nimport { escapeMarkdown, GuildMember } from \"discord.js\";\r\nimport { createCommand } from \"../util\";\r\n\r\nexport const command = createCommand({\r\n\tdata: [\r\n\t\t{\r\n\t\t\tname: \"avatar\",\r\n\t\t\tdescription: \"Mostra l'avatar di un utente\",\r\n\t\t\ttype: ApplicationCommandType.ChatInput,\r\n\t\t\toptions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"user\",\r\n\t\t\t\t\tdescription: \"L'utente di cui mostrare l'avatar\",\r\n\t\t\t\t\ttype: ApplicationCommandOptionType.User,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n\tasync run(interaction) {\r\n\t\tconst { guild } = interaction;\r\n\t\tconst option =\r\n\t\t\tinteraction.options.data.find(\r\n\t\t\t\t(o) => o.type === ApplicationCommandOptionType.User\r\n\t\t\t) ?? interaction;\r\n\t\tconst user = option.user ?? interaction.user;\r\n\t\tconst member = option.member\r\n\t\t\t? option.member\r\n\t\t\t: guild\r\n\t\t\t? await guild.members.fetch(user.id).catch(() => user)\r\n\t\t\t: user;\r\n\t\tconst url =\r\n\t\t\t\"client\" in member\r\n\t\t\t\t? member.displayAvatarURL({\r\n\t\t\t\t\t\textension: \"png\",\r\n\t\t\t\t\t\tsize: 4096,\r\n\t\t\t\t  })\r\n\t\t\t\t: member.avatar != null\r\n\t\t\t\t? this.client.rest.cdn.guildMemberAvatar(\r\n\t\t\t\t\t\tguild!.id,\r\n\t\t\t\t\t\tuser.id,\r\n\t\t\t\t\t\tmember.avatar,\r\n\t\t\t\t\t\t{ size: 4096, extension: \"png\" }\r\n\t\t\t\t  )\r\n\t\t\t\t: user.displayAvatarURL({\r\n\t\t\t\t\t\textension: \"png\",\r\n\t\t\t\t\t\tsize: 4096,\r\n\t\t\t\t  });\r\n\r\n\t\tawait interaction.reply({\r\n\t\t\tcontent: `Avatar di **[${escapeMarkdown(\r\n\t\t\t\tmember instanceof GuildMember\r\n\t\t\t\t\t? member.displayName\r\n\t\t\t\t\t: \"nick\" in member && member.nick != null\r\n\t\t\t\t\t? member.nick\r\n\t\t\t\t\t: user.username\r\n\t\t\t)}](${url} )**:`,\r\n\t\t\tcomponents: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: ComponentType.ActionRow,\r\n\t\t\t\t\tcomponents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: ComponentType.Button,\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tstyle: ButtonStyle.Link,\r\n\t\t\t\t\t\t\tlabel: \"Apri l'originale\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\t},\r\n});\r\n","export const Constants = {\r\n\t/**\r\n\t * The label used for the online event of the client\r\n\t */\r\n\tclientOnlineLabel: \"Client online\",\r\n\r\n\t/**\r\n\t * The name of the folder with commands\r\n\t */\r\n\tcommandsFolderName: \"commands\",\r\n\r\n\t/**\r\n\t * The name of the folder with events\r\n\t */\r\n\teventsFolderName: \"events\",\r\n} as const;\r\n\r\nexport const Emojis = {\r\n\tkick: \"994260465402253442\",\r\n\tbann: \"994261301364801537\",\r\n};\r\n\r\nexport default Constants;\r\n","import { ActivityType } from \"discord-api-types/v10\";\r\nimport { Client, Collection, Options, Partials } from \"discord.js\";\r\nimport { env, stderr, stdout } from \"node:process\";\r\nimport { inspect } from \"node:util\";\r\nimport color, { Colors } from \"./colors\";\r\nimport type Command from \"./Command\";\r\nimport type Event from \"./Event\";\r\nimport loadCommands from \"./loadCommands\";\r\nimport loadEvents from \"./loadEvents\";\r\n\r\n/**\r\n * A custom class to interact with Discord\r\n */\r\nexport class CustomClient<T extends boolean = boolean> extends Client<T> {\r\n\t/**\r\n\t * Commands of this client\r\n\t */\r\n\tcommands = new Collection<string, Command>();\r\n\r\n\t/**\r\n\t * Events of this client\r\n\t */\r\n\tevents = new Collection<string, Event>();\r\n\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tintents: [\"GuildMembers\", \"Guilds\", \"GuildPresences\"],\r\n\t\t\tallowedMentions: { parse: [], repliedUser: false, roles: [], users: [] },\r\n\t\t\tfailIfNotExists: false,\r\n\t\t\trest: {\r\n\t\t\t\tinvalidRequestWarningInterval: 9_999,\r\n\t\t\t},\r\n\t\t\tmakeCache: Options.cacheWithLimits({\r\n\t\t\t\t...Options.DefaultMakeCacheSettings,\r\n\t\t\t\tBaseGuildEmojiManager: 100,\r\n\t\t\t\tGuildBanManager: 10,\r\n\t\t\t\tGuildInviteManager: 0,\r\n\t\t\t\tGuildMemberManager: 1_000,\r\n\t\t\t\tGuildStickerManager: 0,\r\n\t\t\t\tMessageManager: 0,\r\n\t\t\t\tPresenceManager: {\r\n\t\t\t\t\tmaxSize: 0,\r\n\t\t\t\t\tkeepOverLimit: (_, id) => env.OWNER_IDS?.includes(id) === true,\r\n\t\t\t\t},\r\n\t\t\t\tReactionManager: 0,\r\n\t\t\t\tReactionUserManager: 0,\r\n\t\t\t\tStageInstanceManager: 0,\r\n\t\t\t\tThreadMemberManager: 0,\r\n\t\t\t\tUserManager: 1_000,\r\n\t\t\t\tVoiceStateManager: 0,\r\n\t\t\t\tApplicationCommandManager: 0,\r\n\t\t\t\tGuildScheduledEventManager: 0,\r\n\t\t\t}),\r\n\t\t\tpresence: {\r\n\t\t\t\tactivities: [{ name: \"MS Gaming\", type: ActivityType.Watching }],\r\n\t\t\t},\r\n\t\t\tshards: \"auto\",\r\n\t\t\tpartials: [\r\n\t\t\t\tPartials.Channel,\r\n\t\t\t\tPartials.GuildMember,\r\n\t\t\t\tPartials.Message,\r\n\t\t\t\tPartials.Reaction,\r\n\t\t\t\tPartials.User,\r\n\t\t\t\tPartials.GuildScheduledEvent,\r\n\t\t\t\tPartials.ThreadMember,\r\n\t\t\t],\r\n\t\t\twaitGuildTimeout: 1_000,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Inspects a value.\r\n\t * @param value - The value to check\r\n\t */\r\n\tstatic inspect(this: void, value: unknown) {\r\n\t\tswitch (typeof value) {\r\n\t\t\tcase \"string\":\r\n\t\t\t\treturn value;\r\n\t\t\tcase \"bigint\":\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"boolean\":\r\n\t\t\tcase \"function\":\r\n\t\t\tcase \"symbol\":\r\n\t\t\t\treturn value.toString();\r\n\t\t\tcase \"object\":\r\n\t\t\t\treturn inspect(value);\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"undefined\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prints a message to stdout.\r\n\t * @param message - The string to print\r\n\t */\r\n\tstatic printToStdout(this: void, message: unknown) {\r\n\t\tstdout.write(`${CustomClient.inspect(message)}\\n`);\r\n\t}\r\n\r\n\t/**\r\n\t * Prints a message to stderr.\r\n\t * @param message - The string to print\r\n\t */\r\n\tstatic printToStderr(this: void, message: unknown) {\r\n\t\tstderr.write(color(`${CustomClient.inspect(message)}\\n`, Colors.FgRed));\r\n\t}\r\n\r\n\t/**\r\n\t * Loads commands and events, then logs in with Discord.\r\n\t * @param token - The token to log in with (defaults to process.env.DISCORD_TOKEN)\r\n\t * @returns A promise that resolves when the client is ready\r\n\t */\r\n\tasync login(token?: string) {\r\n\t\tawait Promise.all([loadCommands(this), loadEvents(this)]);\r\n\r\n\t\treturn super.login(token);\r\n\t}\r\n}\r\n\r\nexport default CustomClient;\r\n","import { ApplicationCommandType } from \"discord-api-types/v10\";\r\nimport { readdir } from \"node:fs/promises\";\r\nimport type { CommandOptions, CustomClient } from \".\";\r\nimport Command from \"./Command\";\r\nimport Constants from \"./Constants\";\r\n\r\n/**\r\n * Loads all commands from the commands directory.\r\n * @param client - The client to load commands into\r\n */\r\nexport const loadCommands = async (client: CustomClient) => {\r\n\tconst fileNames = await readdir(\r\n\t\tnew URL(Constants.commandsFolderName, import.meta.url)\r\n\t);\r\n\tconst files = await Promise.all(\r\n\t\tfileNames\r\n\t\t\t.filter((fileName) => fileName.endsWith(\".js\"))\r\n\t\t\t.map(\r\n\t\t\t\t(fileName) =>\r\n\t\t\t\t\timport(`./${Constants.commandsFolderName}/${fileName}`) as Promise<{\r\n\t\t\t\t\t\tcommand: CommandOptions;\r\n\t\t\t\t\t}>\r\n\t\t\t)\r\n\t);\r\n\tconst commands = files.map((file) => file.command);\r\n\tfor (const command of commands)\r\n\t\tclient.commands.set(\r\n\t\t\tcommand.data.find(({ type }) => type === ApplicationCommandType.ChatInput)\r\n\t\t\t\t?.name ?? command.data[0].name,\r\n\t\t\tnew Command(client, command)\r\n\t\t);\r\n};\r\n\r\nexport default loadCommands;\r\n","import type {\r\n\tApplicationCommandOptionType,\r\n\tApplicationCommandType,\r\n} from \"discord-api-types/v10\";\r\nimport type { CommandOptions } from \"./types\";\r\n\r\n/**\r\n * This utility function is just to infer automatically the command type from the data.\r\n * @param command - The command data\r\n * @returns The command data\r\n */\r\nexport const createCommand = <\r\n\tT extends ApplicationCommandType,\r\n\tO extends ApplicationCommandOptionType,\r\n\tN extends string = string\r\n>(\r\n\tcommand: CommandOptions<T, O, N>\r\n) => command;\r\n\r\nexport default createCommand;\r\n","import { ApplicationCommandType } from \"discord-api-types/v10\";\nimport { unlink, watch } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport { cwd } from \"node:process\";\nimport type { CommandOptions } from \".\";\nimport Command from \"./Command\";\nimport Constants from \"./Constants\";\nimport CustomClient from \"./CustomClient\";\n\nconst commandsFolder = join(cwd(), `src/${Constants.commandsFolderName}`);\nconst importCommand = (name: string, fresh = false) =>\n\t(\n\t\timport(\n\t\t\t`./${Constants.commandsFolderName}/${name.replace(/\\.ts$/, \".js\")}${\n\t\t\t\tfresh ? `?${Date.now()}` : \"\"\n\t\t\t}`\n\t\t) as Promise<{\n\t\t\tcommand: CommandOptions;\n\t\t}>\n\t)\n\t\t.then((c) => c.command)\n\t\t.catch(() => undefined);\n\nexport const watchChanges = async (client: CustomClient) => {\n\t// eslint-disable-next-line node/no-unpublished-import\n\tconst tsup = await import(\"tsup\").catch(() => {\n\t\tCustomClient.printToStderr(\n\t\t\t\"Failed to load tsup, not watching for changes...\"\n\t\t);\n\t});\n\n\tif (tsup)\n\t\tfor await (const event of watch(commandsFolder, {\n\t\t\tencoding: \"utf8\",\n\t\t\tpersistent: false,\n\t\t})) {\n\t\t\tconst oldCommand = await importCommand(event.filename, true);\n\n\t\t\tif (event.eventType === \"rename\" && oldCommand) {\n\t\t\t\tconst { name } =\n\t\t\t\t\toldCommand.data.find(\n\t\t\t\t\t\t({ type }) => type === ApplicationCommandType.ChatInput\n\t\t\t\t\t) ?? oldCommand.data[0];\n\t\t\t\tconst ok = client.commands.delete(name);\n\n\t\t\t\tunlink(\n\t\t\t\t\tnew URL(\n\t\t\t\t\t\t`${Constants.commandsFolderName}/${event.filename.replace(\n\t\t\t\t\t\t\t/\\.ts/,\n\t\t\t\t\t\t\t\".js\"\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t\timport.meta.url\n\t\t\t\t\t)\n\t\t\t\t).catch(CustomClient.printToStderr);\n\t\t\t\tCustomClient.printToStdout(\n\t\t\t\t\tok\n\t\t\t\t\t\t? `Deleted ${event.filename}`\n\t\t\t\t\t\t: `Couldn't find command ${name} (${event.filename})`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst failed = await tsup\n\t\t\t\t.build({\n\t\t\t\t\tconfig: false,\n\t\t\t\t\tentry: [`src/${Constants.commandsFolderName}/${event.filename}`],\n\t\t\t\t\tformat: \"esm\",\n\t\t\t\t\texternal: [\"tsup\"],\n\t\t\t\t\tminify: true,\n\t\t\t\t\tplatform: \"node\",\n\t\t\t\t\tsourcemap: true,\n\t\t\t\t\ttarget: \"ESNext\",\n\t\t\t\t\toutDir: join(cwd(), \"dist/commands\"),\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tCustomClient.printToStderr(`Failed to build ${event.filename}`);\n\t\t\t\t\treturn true as const;\n\t\t\t\t});\n\n\t\t\tif (failed) continue;\n\t\t\tconst newCommand = await importCommand(event.filename, true);\n\n\t\t\tif (newCommand) {\n\t\t\t\tif (oldCommand)\n\t\t\t\t\tclient.commands.delete(\n\t\t\t\t\t\toldCommand.data.find(\n\t\t\t\t\t\t\t({ type }) => type === ApplicationCommandType.ChatInput\n\t\t\t\t\t\t)?.name ?? oldCommand.data[0].name\n\t\t\t\t\t);\n\t\t\t\tconst { name } =\n\t\t\t\t\tnewCommand.data.find(\n\t\t\t\t\t\t({ type }) => type === ApplicationCommandType.ChatInput\n\t\t\t\t\t) ?? newCommand.data[0];\n\n\t\t\t\tclient.commands.set(name, new Command(client, newCommand));\n\t\t\t\tCustomClient.printToStdout(\n\t\t\t\t\t`${oldCommand ? \"Reloaded\" : \"Added\"} command ${name} (${\n\t\t\t\t\t\tevent.filename\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t} else CustomClient.printToStderr(`Cannot find new ${event.filename}`);\n\t\t}\n};\n\nexport default watchChanges;\n"],"mappings":"AAAA,qIAMA,6DCNO,GAAM,GAAY,CAIxB,kBAAmB,gBAKnB,mBAAoB,WAKpB,iBAAkB,QACnB,EAOA,GAAO,GAAQ,ECtBf,qDACA,+ECDA,+DCWO,GAAM,GAAgB,AAK5B,GACI,ECjBL,gEAEA,iCACA,mCAMA,GAAM,IAAiB,EAAK,EAAI,EAAG,OAAO,EAAU,oBAAoB,ELAjE,GAAM,IAAU,EAAc,CACpC,KAAM,CACL,CACC,KAAM,SACN,YAAa,+BACb,KAAM,EAAuB,UAC7B,QAAS,CACR,CACC,KAAM,OACN,YAAa,oCACb,KAAM,EAA6B,IACpC,CACD,CACD,CACD,EACA,KAAM,KAAI,EAAa,CACtB,GAAM,CAAE,SAAU,EACZ,EACL,EAAY,QAAQ,KAAK,KACxB,AAAC,GAAM,EAAE,OAAS,EAA6B,IAChD,GAAK,EACA,EAAO,EAAO,MAAQ,EAAY,KAClC,EAAS,EAAO,OACnB,EAAO,OACP,EACA,KAAM,GAAM,QAAQ,MAAM,EAAK,EAAE,EAAE,MAAM,IAAM,CAAI,EACnD,EACG,EACL,UAAY,GACT,EAAO,iBAAiB,CACxB,UAAW,MACX,KAAM,IACN,CAAC,EACD,EAAO,QAAU,KACjB,KAAK,OAAO,KAAK,IAAI,kBACrB,EAAO,GACP,EAAK,GACL,EAAO,OACP,CAAE,KAAM,KAAM,UAAW,KAAM,CAC/B,EACA,EAAK,iBAAiB,CACtB,UAAW,MACX,KAAM,IACN,CAAC,EAEL,KAAM,GAAY,MAAM,CACvB,QAAS,gBAAgB,EACxB,YAAkB,GACf,EAAO,YACP,QAAU,IAAU,EAAO,MAAQ,KACnC,EAAO,KACP,EAAK,QACT,MAAM,SACN,WAAY,CACX,CACC,KAAM,EAAc,UACpB,WAAY,CACX,CACC,KAAM,EAAc,OACpB,MACA,MAAO,EAAY,KACnB,MAAO,kBACR,CACD,CACD,CACD,CACD,CAAC,CACF,CACD,CAAC","names":[]}