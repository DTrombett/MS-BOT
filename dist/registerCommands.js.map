{"version":3,"sources":["../src/registerCommands.ts"],"sourcesContent":["/* eslint-disable no-console */\r\nimport { REST } from \"@discordjs/rest\";\r\nimport type { APIApplicationCommand } from \"discord-api-types/v10\";\r\nimport { APIVersion, Routes } from \"discord-api-types/v10\";\r\nimport { config } from \"dotenv\";\r\nimport { promises } from \"node:fs\";\r\nimport { env, exit } from \"node:process\";\r\nimport { URL } from \"node:url\";\r\nimport type { CommandOptions } from \"./util\";\r\nimport Constants from \"./util/Constants\";\r\n\r\nif (env.DISCORD_TOKEN == null) config();\r\n\r\nconsole.time(\"Register slash commands\");\r\n\r\nconst {\r\n\tDISCORD_CLIENT_ID: applicationId,\r\n\tDISCORD_TOKEN: token,\r\n\tTEST_GUILD: guildId,\r\n\tNODE_ENV: nodeEnv,\r\n} = env;\r\nconst rest = new REST({ version: APIVersion }).setToken(token!);\r\nconst commands = await promises\r\n\t.readdir(new URL(Constants.commandsFolderName, import.meta.url))\r\n\t.then((fileNames) =>\r\n\t\tPromise.all(\r\n\t\t\tfileNames\r\n\t\t\t\t.filter((file): file is `${string}.js` => file.endsWith(\".js\"))\r\n\t\t\t\t.map(async (file) => {\r\n\t\t\t\t\tconst fileData = (await import(\r\n\t\t\t\t\t\t`./${Constants.commandsFolderName}/${file}`\r\n\t\t\t\t\t)) as { command: CommandOptions };\r\n\t\t\t\t\treturn fileData.command;\r\n\t\t\t\t})\r\n\t\t)\r\n\t);\r\nconst [privateAPICommands, publicAPICommands] = await Promise.all([\r\n\trest.put(Routes.applicationGuildCommands(applicationId!, guildId!), {\r\n\t\tbody: commands\r\n\t\t\t.filter((c) => nodeEnv !== \"production\" || c.isPublic !== true)\r\n\t\t\t.map((file) => file.data.toJSON()),\r\n\t}) as Promise<APIApplicationCommand[]>,\r\n\tnodeEnv === \"production\"\r\n\t\t? (rest.put(Routes.applicationCommands(applicationId!), {\r\n\t\t\t\tbody: commands\r\n\t\t\t\t\t.filter((c) => c.isPublic)\r\n\t\t\t\t\t.map((file) => file.data.toJSON()),\r\n\t\t  }) as Promise<APIApplicationCommand[]>)\r\n\t\t: [],\r\n]);\r\n\r\nconsole.log(\"Public commands:\", publicAPICommands);\r\nconsole.log(\"Private commands:\", privateAPICommands);\r\nconsole.timeEnd(\"Register slash commands\");\r\nexit(0);\r\n"],"mappings":"wCACA,uCAEA,+DACA,gCACA,mCACA,6CACA,+BAIA,AAAI,EAAI,eAAiB,MAAM,EAAO,EAEtC,QAAQ,KAAK,yBAAyB,EAEtC,GAAM,CACL,kBAAmB,EACnB,cAAe,EACf,WAAY,EACZ,SAAU,GACP,EACE,EAAO,GAAI,GAAK,CAAE,QAAS,CAAW,CAAC,EAAE,SAAS,CAAM,EACxD,EAAW,KAAM,GACrB,QAAQ,GAAI,GAAI,EAAU,mBAAoB,YAAY,GAAG,CAAC,EAC9D,KAAK,AAAC,GACN,QAAQ,IACP,EACE,OAAO,AAAC,GAAiC,EAAK,SAAS,KAAK,CAAC,EAC7D,IAAI,KAAO,IAIJ,AAHW,MAAM,QACvB,KAAK,EAAU,sBAAsB,MAEtB,OAChB,CACH,CACD,EACK,CAAC,EAAoB,GAAqB,KAAM,SAAQ,IAAI,CACjE,EAAK,IAAI,EAAO,yBAAyB,EAAgB,CAAQ,EAAG,CACnE,KAAM,EACJ,OAAO,AAAC,GAAM,IAAY,cAAgB,EAAE,WAAa,EAAI,EAC7D,IAAI,AAAC,GAAS,EAAK,KAAK,OAAO,CAAC,CACnC,CAAC,EACD,IAAY,aACR,EAAK,IAAI,EAAO,oBAAoB,CAAc,EAAG,CACtD,KAAM,EACJ,OAAO,AAAC,GAAM,EAAE,QAAQ,EACxB,IAAI,AAAC,GAAS,EAAK,KAAK,OAAO,CAAC,CAClC,CAAC,EACD,CAAC,CACL,CAAC,EAED,QAAQ,IAAI,mBAAoB,CAAiB,EACjD,QAAQ,IAAI,oBAAqB,CAAkB,EACnD,QAAQ,QAAQ,yBAAyB,EACzC,EAAK,CAAC","names":[]}